<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>邹雷</title>
  <subtitle>刨过的坑,自己慢慢来填</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ficapy.com/"/>
  <updated>2016-07-10T09:26:19.000Z</updated>
  <id>http://ficapy.com/</id>
  
  <author>
    <name>Ficapy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python描述符应用</title>
    <link href="http://ficapy.com/2016/07/10/python_descriptor/"/>
    <id>http://ficapy.com/2016/07/10/python_descriptor/</id>
    <published>2016-07-10T09:13:43.000Z</published>
    <updated>2016-07-10T09:26:19.000Z</updated>
    
    <content type="html">&lt;p&gt;个人认为python中描述符协议是一个比较神奇的存在，是因为如果你不去了解property的内部实现，没有深究别人写的__set__、__get__方法。或许写python很多年都对这个东西没什么了解。然而这玩意儿有时候真的挺好用的。本文不会详述描述符协议。会着重讲一个小例子。如果以前没有接触过描述符，请依次查看文末相关资料的两篇文章&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;适用范围&quot;&gt;&lt;a href=&quot;#适用范围&quot; class=&quot;headerlink&quot; title=&quot;适用范围&quot;&gt;&lt;/a&gt;适用范围&lt;/h3&gt;&lt;p&gt;描述符协议都是针对对象属性的访问。先要明白我们不会去针对一个全局的def使用property进行装饰。我们一般都是在类里面使用。可以对类的访问使用描述符(比较少用)，更常用的是针对类实例的访问使用描述符协议&lt;/p&gt;
&lt;h3 id=&quot;资料描述符和非资料描述符的区别&quot;&gt;&lt;a href=&quot;#资料描述符和非资料描述符的区别&quot; class=&quot;headerlink&quot; title=&quot;资料描述符和非资料描述符的区别&quot;&gt;&lt;/a&gt;资料描述符和非资料描述符的区别&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RevealAccess&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, obj, objtype)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.val&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# def __set__(self, obj, val):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#     self.val = val&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x = RevealAccess()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m = MyClass()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(m.x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.x = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(m.__dict__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;m.__dict__[&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(m.__dict__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(m.x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(m.__class__ &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; type(m))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先，当对属性x进行访问的时候不是直接返回描述符对象，而是按照描述符规则执行了描述符对象的__get__等方法！资料描述符就是同时实现了__get__和__set__，区别就是是资料描述符的时候就按照资料描述符的__get__、__set__来。非资料描述符的时候那就先访问&lt;code&gt;instance.__dict__[&amp;#39;x&amp;#39;]&lt;/code&gt;，没有就在按照非资料描述符的__get__来。上面的例子先注释掉__set__就是非资料描述符，对实例属性进行访问的时候先访问了instance.__dict__没有就使用了描述符对象的__get__方法。当为资料描述符的时候纵然对instance.__dict__设置了。依然会调用描述符对象。&lt;/p&gt;
&lt;h3 id=&quot;示例应用-property加强版，增加缓存-最简代码&quot;&gt;&lt;a href=&quot;#示例应用-property加强版，增加缓存-最简代码&quot; class=&quot;headerlink&quot; title=&quot;示例应用:property加强版，增加缓存(最简代码)&quot;&gt;&lt;/a&gt;示例应用:property加强版，增加缓存(最简代码)&lt;/h3&gt;&lt;p&gt;首先来一个例子&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;decorator&quot;&gt;    @property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;jammy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,_cache=&amp;#123;&amp;#125;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;result&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; _cache:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _cache[&lt;span class=&quot;string&quot;&gt;&#39;result&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;jammy called&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cache.update(&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;result&#39;&lt;/span&gt;:result&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = Foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f.jammy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f.jammy)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;该方法使用python函数的默认参数只初始化一次对结果进行缓存。缺点比较明显。1.无法复用。2.对原函数进行了修改&lt;/p&gt;
&lt;p&gt;下面看pyramid的实现&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reify&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.func = func&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, obj, cls)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value = obj.__dict__[self.func.__name__] = self.func(obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;decorator&quot;&gt;    @reify&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;jammy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;jammy called&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = Foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f.jammy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f.jammy)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;使用的是非资料描述符，第一次对属性进行访问的时候，因为f.__dict__是没有jammy的。故而访问了描述符，在描述符__get__里面将结果加入到了f.__dict__里面。后面访问就没__get__什么事儿了。实现了对结果的缓存&lt;/p&gt;
&lt;p&gt;再看werkzeug的实现&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cached_property&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(property)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, func, name=None, doc=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.__name__ = func.__name__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.func = func&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__set__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, obj, value)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        obj.__dict__[self.__name__] = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__get__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, obj, type=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value = obj.__dict__.get(self.__name__)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; value &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            value = self.func(obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            obj.__dict__[self.__name__] = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;decorator&quot;&gt;    @cached_property&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;jammy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;jammy called&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = Foo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f.jammy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f.jammy)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;可以看到和资料描述符的基本一样。可以看到__set__基本没什么用，仅仅只是表面了这是一个资料描述符。而且同样的，为了方便也一样把结果存储到了f.__dict__里面&lt;/p&gt;
&lt;h3 id=&quot;相关资料&quot;&gt;&lt;a href=&quot;#相关资料&quot; class=&quot;headerlink&quot; title=&quot;相关资料&quot;&gt;&lt;/a&gt;相关资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://harveyqing.gitbooks.io/python-read-and-write/content/python_advance/python_descriptor.html&quot;&gt;python官方文档描述符指南(译)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.geekfan.net/7862/&quot;&gt;python描述符解密&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;个人认为python中描述符协议是一个比较神奇的存在，是因为如果你不去了解property的内部实现，没有深究别人写的__set__、__get__方法。或许写python很多年都对这个东西没什么了解。然而这玩意儿有时候真的挺好用的。本文不会详述描述符协议。会着重讲一个小例子。如果以前没有接触过描述符，请依次查看文末相关资料的两篇文章&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://ficapy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>wsgiref源码阅读</title>
    <link href="http://ficapy.com/2016/07/04/2016-07-04/"/>
    <id>http://ficapy.com/2016/07/04/2016-07-04/</id>
    <published>2016-07-04T09:32:07.000Z</published>
    <updated>2016-07-04T09:38:55.000Z</updated>
    
    <content type="html">&lt;pre&gt;&lt;code&gt; _ _ _ ____ ____ _ ____ ____ ____    _ _  _ _  _ ____ ____ _ ___
 | | | [__  | __ | |__/ |___ |___    | |\ | |__| |___ |__/ |  |
 |_|_| ___] |__] | |  \ |___ |       | | \| |  | |___ |  \ |  |
+--------------------------+     +---------------------------------+
|    wsgiref.WSGIServer    |     |   wsgiref.WSGIRequestHandler    |
+--------------------------+     +---------------------------------+
              |
+-------------v------------+    +------------------------------------+
|  http.server.HTTPServer  |    | http.server.BaseHTTPRequestHandler |
+--------------------------+    +------------------------------------+

+--------------------------+    +------------------------------------+
|  socketserver.TCPServer  |    | socketserver.StreamRequestHandler  |
+--------------------------+    +------------------------------------+
                                        overload handle logic

Created with Monodraw
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;dd&quot;&gt;&lt;a href=&quot;#dd&quot; class=&quot;headerlink&quot; title=&quot;dd&quot;&gt;&lt;/a&gt;dd&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt; _ _ _ ____ ____ _ ____ ____ ____    _ _  _ _  _ ____ ____ _ ___
 | | | [__  | __ | |__/ |___ |___    | |\ | |__| |___ |__/ |  |

    
    </summary>
    
      <category term="源码解析" scheme="http://ficapy.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>http.server源码阅读</title>
    <link href="http://ficapy.com/2016/07/02/http_server_note/"/>
    <id>http://ficapy.com/2016/07/02/http_server_note/</id>
    <published>2016-07-02T09:07:20.000Z</published>
    <updated>2016-07-02T10:19:40.000Z</updated>
    
    <content type="html">&lt;p&gt;上一章讲SocketServer模块，它将服务端根据监听套接字和连接套接字分为了2个部分(BaseServer/BaseRequestHandler)，而连接套接字类的处理方法相当简单，最终是一个handle函数就搞定了。http.server这个模块主要类BaseHTTPRequestHandle继承自BaseRequestHandle,对handle进行了一点点的加强，主要就是对http协议进行了简单的解析工作(源码版本Python3.5)&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;先上图为敬:D&lt;br&gt;&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/httpserver_note.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这个模块只需要关心BaseHTTPRequestHandler类，其实里面还有个CGI处理类，不过这玩意儿估计也是上古神兽了。没关注的必要。&lt;/p&gt;
&lt;h3 id=&quot;代码解读&quot;&gt;&lt;a href=&quot;#代码解读&quot; class=&quot;headerlink&quot; title=&quot;代码解读&quot;&gt;&lt;/a&gt;代码解读&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;支持http版本0.9、1.0、1.1，区别就是0.9版本只有body。1.1版本显式支持keep-alive。为了支持keep-alive，代码中有多处处理逻辑&lt;/li&gt;
&lt;li&gt;对于内容的解析主要是使用parse_request方法。该方法逻辑主要解析第一行request line。如果出错就直接调用send_error返回错误内容。header部分主要引入了email.parser.Parser进行解析&lt;/li&gt;
&lt;li&gt;parser_request对&lt;code&gt;Except:100-continue&lt;/code&gt;进行了特殊处理，见附录&lt;/li&gt;
&lt;li&gt;返回status line和header是先使用send_response_only创建一个列表，然后调用send_header依次在列表中添加数据，最后调用end_headers发送数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;send_error函数就是一个回复的典范&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;剩下就是日志函数和几个辅助函数了&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; http.server &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BaseHTTPRequestHandler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; socketserver &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ThreadingTCPServer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BaseHTTPRequestHandler)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protocol_version = &lt;span class=&quot;string&quot;&gt;&quot;HTTP/1.1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;do_GET&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.send_error(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;do_POST&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        len = self.headers.get(&lt;span class=&quot;string&quot;&gt;&#39;Content-Length&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data = self.rfile.read(int(len))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.send_response(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.send_header(&lt;span class=&quot;string&quot;&gt;&#39;Content-Length&#39;&lt;/span&gt;, len)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.end_headers()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.wfile.write(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ThreadingTCPServer((&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9999&lt;/span&gt;), Handle).serve_forever()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是一个最简的http server。do_GET函数表面send_error就能够响应一个请求。do_POST函数参照send_error的逻辑只不过读取了客户端发送的body字段&lt;/p&gt;
&lt;h3 id=&quot;小知识&quot;&gt;&lt;a href=&quot;#小知识&quot; class=&quot;headerlink&quot; title=&quot;小知识&quot;&gt;&lt;/a&gt;小知识&lt;/h3&gt;&lt;h6 id=&quot;类变量和实例变量&quot;&gt;&lt;a href=&quot;#类变量和实例变量&quot; class=&quot;headerlink&quot; title=&quot;类变量和实例变量&quot;&gt;&lt;/a&gt;类变量和实例变量&lt;/h6&gt;&lt;p&gt;这2个非常相近，具体区别我就不概述了。在写代码的时候很多人无脑self.xxx = xxx就搞了一个实例变量。大多数时候用实例变量都能够替代类变量的功能。这很容易让人忽略类变量的优点。①含义明确：这是这个类的所有实例共用的。②不需要重载&lt;strong&gt;init&lt;/strong&gt;，这在继承的时候是很有用哒~~~，so，不要有事没事无脑在&lt;strong&gt;init&lt;/strong&gt;里面self.xxx = xxx啦&lt;/p&gt;
&lt;h3 id=&quot;相关资料&quot;&gt;&lt;a href=&quot;#相关资料&quot; class=&quot;headerlink&quot; title=&quot;相关资料&quot;&gt;&lt;/a&gt;相关资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.laruence.com/2011/01/20/1840.html&quot;&gt;Expect:100-continue&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://docs.python.org/3.6/library/http.server.html?highlight=http.server#http.server.BaseHTTPRequestHandler&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上一章讲SocketServer模块，它将服务端根据监听套接字和连接套接字分为了2个部分(BaseServer/BaseRequestHandler)，而连接套接字类的处理方法相当简单，最终是一个handle函数就搞定了。http.server这个模块主要类BaseHTTPRequestHandle继承自BaseRequestHandle,对handle进行了一点点的加强，主要就是对http协议进行了简单的解析工作(源码版本Python3.5)&lt;/p&gt;
    
    </summary>
    
      <category term="源码解析" scheme="http://ficapy.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>SocketServer源码阅读</title>
    <link href="http://ficapy.com/2016/06/29/socketserver_note/"/>
    <id>http://ficapy.com/2016/06/29/socketserver_note/</id>
    <published>2016-06-29T03:53:14.000Z</published>
    <updated>2016-07-02T10:24:36.000Z</updated>
    
    <content type="html">&lt;p&gt;SocketServer.py这个文件700来行，除去注释大概300来行左右，据网友称该模块实乃学习类继承之典范。&lt;br&gt;要理解这个模块真的非常的简单，也让人体会到同步编程的简单性。另外我现在比较关注web编程，所以会比较关注tcp部分忽略掉udp(源码版本Python2.7.11)&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;类继承关系&quot;&gt;&lt;a href=&quot;#类继承关系&quot; class=&quot;headerlink&quot; title=&quot;类继承关系&quot;&gt;&lt;/a&gt;类继承关系&lt;/h3&gt;&lt;p&gt;不说别的，单单看到这张图就能唬住好多人，感觉很高大上有没有&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| BaseServer |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-----------+        +------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| TCPServer |-------&amp;gt;| UnixStreamServer |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-----------+        +------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-----------+        +--------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| UDPServer |-------&amp;gt;| UnixDatagramServer |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+-----------+        +--------------------+&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;同步处理类比&quot;&gt;&lt;a href=&quot;#同步处理类比&quot; class=&quot;headerlink&quot; title=&quot;同步处理类比&quot;&gt;&lt;/a&gt;同步处理类比&lt;/h3&gt;&lt;p&gt;服务端嘛，请允许我污一下，就像古装剧里面的怡红院，都有个门口接客的老鸨，有客户来就引进去然后交给失足少女。老鸨就是服务端的监听socket，失足少女就是具体处理的业务逻辑。可以写成如下伪代码&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = socket.socket()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.bind((&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9999&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.listen(&lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    client,addr = s.accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    handle(client,addr,s)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;    &lt;/p&gt;
&lt;p&gt;可以说socketserver就是由上面最基本的步骤，为了扩展性而写的代码。上面的伪代码handle(client,addr,s)是一部分，上面的分为另外一部分。&lt;/p&gt;
&lt;p&gt;socketserver因为是同步的，所以理解起来比asyncore要简单许多。而且注释写的非常详尽，我就不详述BaseServer/BaseRequestHandler的类方法了，说一下几个有点意思的地方。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;BaseServer部分基本就代表了监听套接字，然而还是提供了2个对连接套接字的方法，就是处理完成之后关闭啦~~shutdown_request/close_request&lt;/li&gt;
&lt;li&gt;handle_request方法和server_forever是非常相似的，区别就是handler_request只相应一个请求。大概是用来调试吧。该函数还调起了一个特别垃圾的handle&lt;em&gt;timeout函数。看名字是不是以为是对连接套接字的超时处理函数-&lt;/em&gt;-，实际上是等多久还没来一个新连接会触发，可是这个需求基本没有。所以我非常认为这个handle_request仅仅用来调试一次而已&lt;/li&gt;
&lt;li&gt;上面的伪代码并没有用到select，为什么socketserver就用到了，其实如果只是为了处理tcp那么此处是没有必要用select的，因为tcp需要accept而udp是直接recvfrom就好了。用select只是为了通知有数据来了。都是为了适应多种情况才用的select。另外需要注意的是它不是用的文件描述符，是直接用的self，这里只要self实现了file_no方法就可以了(参照官方文档)。还有select另外套了一个_eintr_retry函数。这里是因为某些情况下select会被操作系统中断而引发异常(比如使用single)&lt;/li&gt;
&lt;li&gt;可以很明显的看到实现的ThreadingTCPServer是通过继承的方式实现的，实质就是处理连接套接字的时候使用多线程或者多进程,可以想到要实现相同的效果用装饰器同样是可以的&lt;/li&gt;
&lt;li&gt;StreamRequestHandler中使用了socket.makefile将连接套接字分成了读和写2个类文件对象(只能是阻塞socket)。可以感受到的优势就是read(num)返回的长度是准确的，recv就没有这个优势&lt;/li&gt;
&lt;li&gt;用到了threading.Event,这个地方我是没多搞明白。调用shutdown方法会中断循环从而关闭服务。一般会在处理线程调用这个。如果不是在处理线程调用那么会发生死锁。。。我能想到的只有这里&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;socks5-DEMO-引用自http-xiaoxia-org-2011-03-29-written-by-python-socks5-server&quot;&gt;&lt;a href=&quot;#socks5-DEMO-引用自http-xiaoxia-org-2011-03-29-written-by-python-socks5-server&quot; class=&quot;headerlink&quot; title=&quot;socks5 DEMO(引用自http://xiaoxia.org/2011/03/29/written-by-python-socks5-server/)&quot;&gt;&lt;/a&gt;socks5 DEMO(引用自&lt;a href=&quot;http://xiaoxia.org/2011/03/29/written-by-python-socks5-server/&quot;&gt;http://xiaoxia.org/2011/03/29/written-by-python-socks5-server/&lt;/a&gt;)&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; socket, select, SocketServer, struct&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Socks5Handle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SocketServer.StreamRequestHandler)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tcprelay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, sock, remote)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fdset = [sock, remote]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            r, w, e = select.select(fdset, [], [])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sock &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; r:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; remote.send(sock.recv(&lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;)) &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; remote &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; r:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sock.send(remote.recv(&lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;)) &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&#39;socks connection from &#39;&lt;/span&gt;, self.client_address)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sock = self.connection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# 1. Version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sock.recv(&lt;span class=&quot;number&quot;&gt;262&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sock.send(&lt;span class=&quot;string&quot;&gt;b&quot;\x05\x00&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# 2. Request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            data = self.rfile.read(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mode = ord(data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            addrtype = ord(data[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; addrtype == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:  &lt;span class=&quot;comment&quot;&gt;# IPv4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                addr = socket.inet_ntoa(self.rfile.read(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; addrtype == &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:  &lt;span class=&quot;comment&quot;&gt;# Domain name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                addr = self.rfile.read(ord(sock.recv(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            port = struct.unpack(&lt;span class=&quot;string&quot;&gt;&#39;&amp;gt;H&#39;&lt;/span&gt;, self.rfile.read(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            reply = &lt;span class=&quot;string&quot;&gt;b&quot;\x05\x00\x00\x01&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; mode == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:  &lt;span class=&quot;comment&quot;&gt;# 1. Tcp connect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    remote = socket.socket(socket.AF_INET, socket.SOCK_STREAM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    remote.connect((addr, port[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    print(&lt;span class=&quot;string&quot;&gt;&#39;Tcp connect to&#39;&lt;/span&gt;, addr, port[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    reply = &lt;span class=&quot;string&quot;&gt;b&quot;\x05\x07\x00\x01&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Command not supported&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                local = remote.getsockname()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                reply += socket.inet_aton(local[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) + struct.pack(&lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;H&quot;&lt;/span&gt;, local[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; socket.error:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;# Connection refused&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                reply = &lt;span class=&quot;string&quot;&gt;&#39;\x05\x05\x00\x01\x00\x00\x00\x00\x00\x00&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sock.send(reply)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# 3. Transfering&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; reply[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;\x00&#39;&lt;/span&gt;:  &lt;span class=&quot;comment&quot;&gt;# Success&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                self.tcprelay(sock, remote)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; socket.error:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&#39;socket error&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server = SocketServer.ThreadingTCPServer((&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1081&lt;/span&gt;), Socks5Handle)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server.serve_forever()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;和asyncore对比&quot;&gt;&lt;a href=&quot;#和asyncore对比&quot; class=&quot;headerlink&quot; title=&quot;和asyncore对比&quot;&gt;&lt;/a&gt;和asyncore对比&lt;/h3&gt;&lt;p&gt;asyncore和socketserver同样实现了并发。对比一下&lt;br&gt;1.从名字都可以看出来server。socketserver只能用来实现server，而asyncore还可以实现客户端&lt;br&gt;2.socketserver实现了多线程和多进程，asyncore框架是单线程事件循环&lt;/p&gt;
&lt;h3 id=&quot;相关资料&quot;&gt;&lt;a href=&quot;#相关资料&quot; class=&quot;headerlink&quot; title=&quot;相关资料&quot;&gt;&lt;/a&gt;相关资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://pymotw.com/2/SocketServer/index.html#module-SocketServer&quot;&gt;SocketServer – Creating network servers.&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;SocketServer.py这个文件700来行，除去注释大概300来行左右，据网友称该模块实乃学习类继承之典范。&lt;br&gt;要理解这个模块真的非常的简单，也让人体会到同步编程的简单性。另外我现在比较关注web编程，所以会比较关注tcp部分忽略掉udp(源码版本Python2.7.11)&lt;/p&gt;
    
    </summary>
    
      <category term="源码解析" scheme="http://ficapy.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>asyncore源码阅读</title>
    <link href="http://ficapy.com/2016/06/29/asyncore_note/"/>
    <id>http://ficapy.com/2016/06/29/asyncore_note/</id>
    <published>2016-06-29T03:24:21.000Z</published>
    <updated>2016-07-02T10:24:51.000Z</updated>
    
    <content type="html">&lt;p&gt;asyncore为select.select、poll的封装(实际上现在大家都使用更为高效的epoll)，变成了框架的使用模式，该库已经作为兼容模式存在，新的库为asyncio。且在2和3中asyncore代码有一点点差异。(源码版本2.7.11)&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;dispatcher类-调度&quot;&gt;&lt;a href=&quot;#dispatcher类-调度&quot; class=&quot;headerlink&quot; title=&quot;dispatcher类(调度)&quot;&gt;&lt;/a&gt;dispatcher类(调度)&lt;/h3&gt;&lt;p&gt;文件asyncore.py中最重要的类为dispatcher，使用的时候只需要继承asyncore.dispatcher就好了&lt;/p&gt;
&lt;p&gt;可以这样理解每一个继承了asyncore.dispatcher的类都代表了一个socket(监听socket或者连接socket)&lt;/p&gt;
&lt;p&gt;在asyncore.py的最开始有一个全局字典socket_map对应fd和一个asyncore.dispatcher类，当你继承一个dispatcher类的时候总会调用函数在全局字典socket_map中创建一个映射，当然在关闭的时候也会从全局字典中删除&lt;/p&gt;
&lt;p&gt;最后是一个loop死循环，可以很容易想到是使用了系统IO多路复用接口select.select对全局socket_map进行了操作。根据返回的事件进行操作(3个事件读、写、错误)&lt;/p&gt;
&lt;p&gt;源码中我们着重看dispatcher类，它可以划分为以下几个要点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加了4个状态，connected/accepting/connecting/closing，想想为什么要设置这几个状态呢？？？&lt;br&gt;connected:已经连接上对方,比如监听套接字sock,addr = socket.accept()返回的sock&lt;/li&gt;
&lt;li&gt;add_channel/del_channel/create_socket/set_socket这几个都是针对全局字典socket_map的操作。添加进去或者删除&lt;/li&gt;
&lt;li&gt;readable/writable 用的地方不是太多，预先确定该socket该不该添加到socket的可读可写里面&lt;/li&gt;
&lt;li&gt;listen/bind/connect/accept/send/recv/close 这几个函数嘛，对原有的行为稍微改动了下，比如listen设置为accepting状态，connect设置为connecting状态，send,recv一定条件出发close，close即为从全局字典中删除并关闭socket&lt;/li&gt;
&lt;li&gt;handle_read_event/handle_connect_event/handle_write_event.当select有事件返回的时候就是调用的这3个方法。只是需要注意。这里并不是最终执行的操作(send、recv等)！！！这里也体现了标注socket状态的作用，read可以分为监听(accepting)、连接完成后(connecting)→→→这里就是一个hook，如果自己调用connect连接那么完成后是此状态，可以自己重写handle_connect处理该事件，如果是直接初始化的socket则直接为connected状态。handle_write_event也很明显，当为connecting状态的时候处理hook，否则处理写入事件&lt;/li&gt;
&lt;li&gt;最后这一部分基本就是使用者需要重写的部分了。handle_expt/handle_read/handle_write/handle_connect/handle_accept/handle_close含义很明白，就不表述了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在后面就是dispatcher的继承类dispatcher_with_send和file_dispatcher，前者嘛，试想一下你要发送非常多内容，肯定调用一次send发不完。它就给你解决了这个问题，当然方法也很简单。后面就是为了高效发送文件而产生的了&lt;/p&gt;
&lt;h3 id=&quot;流程图示-以一个客户端为例&quot;&gt;&lt;a href=&quot;#流程图示-以一个客户端为例&quot; class=&quot;headerlink&quot; title=&quot;流程图示(以一个客户端为例)&quot;&gt;&lt;/a&gt;流程图示(以一个客户端为例)&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/asyncore%E7%AE%80%E6%98%93%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B5%81%E7%A8%8B%E5%9B%BE.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;sockets5-DEMO&quot;&gt;&lt;a href=&quot;#sockets5-DEMO&quot; class=&quot;headerlink&quot; title=&quot;sockets5 DEMO&quot;&gt;&lt;/a&gt;sockets5 DEMO&lt;/h3&gt;&lt;p&gt;对于使用asyncore，官方的例子我觉得已经表现的非常到位了。下面我放出一个使用它写的简单socks5server(作为一个demo，只对tcp进行处理，没有写远程dns解析)&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; asyncore&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; socket&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; struct&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sockets_map = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Socks5Listen&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(asyncore.dispatcher)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, address=&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8081&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        asyncore.dispatcher.__init__(self)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.set_reuse_addr()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.bind(address)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.listen(&lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_accept&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pair = self.accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; pair &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sock, addr = pair&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            print(&lt;span class=&quot;string&quot;&gt;&#39;socks connection from &#39;&lt;/span&gt;, addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Local(sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Local&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(asyncore.dispatcher_with_send)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, sock)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        asyncore.dispatcher_with_send.__init__(self, sock=sock)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.read_buffer = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.status = &lt;span class=&quot;string&quot;&gt;&#39;init&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, num)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data = self.recv(num)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.read_buffer += data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(self.read_buffer) != num:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _ = self.read_buffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.read_buffer = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self.status == &lt;span class=&quot;string&quot;&gt;&#39;init&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.recv(&lt;span class=&quot;number&quot;&gt;262&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.send(&lt;span class=&quot;string&quot;&gt;b&quot;\x05\x00&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.status = &lt;span class=&quot;string&quot;&gt;&#39;request&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self.status == &lt;span class=&quot;string&quot;&gt;&#39;request&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            data = self.read(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mode = ord(data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            addrtype = ord(data[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; addrtype == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:  &lt;span class=&quot;comment&quot;&gt;# IPv4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                addr = self.read(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; addr &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                addr = socket.inet_ntoa(addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; addrtype == &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:  &lt;span class=&quot;comment&quot;&gt;# Domain name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                addr = self.read(ord(self.recv(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; addr &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            port = self.read(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; port &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            port = struct.unpack(&lt;span class=&quot;string&quot;&gt;&#39;&amp;gt;H&#39;&lt;/span&gt;, port)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; mode == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:  &lt;span class=&quot;comment&quot;&gt;# 1. Tcp connect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                remote = Remote(addr, port)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sockets_map[self] = remote&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sockets_map[remote] = self&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                self.status = &lt;span class=&quot;string&quot;&gt;&#39;transfer&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                reply = &lt;span class=&quot;string&quot;&gt;b&quot;\x05\x07\x00\x01&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# Command not supported&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                self.send(reply)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                self.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self.status == &lt;span class=&quot;string&quot;&gt;&#39;transfer&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            data = self.recv(&lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sockets_map[self].send(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_expt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.handle_close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_close&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        asyncore.dispatcher_with_send.handle_close(self)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        remote = sockets_map.get(self)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; remote:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; sockets_map[remote]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sockets_map:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; sockets_map[self]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Remote&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(asyncore.dispatcher_with_send)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, addr, port)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        asyncore.dispatcher_with_send.__init__(self)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.connect((addr, port))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_connect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;Tcp connect to&#39;&lt;/span&gt;, self.addr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        local = self.socket.getsockname()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reply = &lt;span class=&quot;string&quot;&gt;b&quot;\x05\x00\x00\x01&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reply += socket.inet_aton(local[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) + struct.pack(&lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;H&quot;&lt;/span&gt;, local[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sockets_map[self].socket.send(reply)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data = self.recv(&lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sockets_map[self].send(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_expt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reply = &lt;span class=&quot;string&quot;&gt;&#39;\x05\x05\x00\x01\x00\x00\x00\x00\x00\x00&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.send(reply)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.handle_close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle_close&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        asyncore.dispatcher_with_send.handle_close(self)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        local = sockets_map.get(self)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; local:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; sockets_map[local]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sockets_map:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; sockets_map[self]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;server = Socks5Listen()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;asyncore.loop()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个socks5服务端会有3类socket。所以会有三个类。&lt;/p&gt;
&lt;h3 id=&quot;小知识&quot;&gt;&lt;a href=&quot;#小知识&quot; class=&quot;headerlink&quot; title=&quot;小知识&quot;&gt;&lt;/a&gt;小知识&lt;/h3&gt;&lt;h6 id=&quot;LEGB作用域&quot;&gt;&lt;a href=&quot;#LEGB作用域&quot; class=&quot;headerlink&quot; title=&quot;LEGB作用域&quot;&gt;&lt;/a&gt;LEGB作用域&lt;/h6&gt;&lt;p&gt;asyncore中使用全局字典socket_map记录映射。想到全局就会想到global&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;可以注意到这里必须要有global关键字，然而换成字典。为何就不需要global了。实际上这里要关注的是对象的id,对于数字、字符串这些对象是不可变的，然而字典对象是可变的。要改变不可变变量实际是重新赋值，所以对于改变外部不可变变量要用global，可变对象不需要&lt;/p&gt;
&lt;h6 id=&quot;框架和库的区别&quot;&gt;&lt;a href=&quot;#框架和库的区别&quot; class=&quot;headerlink&quot; title=&quot;框架和库的区别&quot;&gt;&lt;/a&gt;框架和库的区别&lt;/h6&gt;&lt;p&gt;俗称好莱坞模式(Don’t call us, we will call you)。比如库函数sum你很容易想到给几个数字它返回给你和。框架嘛。就像上面的asyncore你需要的是继承dispatcher类然后重新一些方法。虽然它能达到目的，可是如果你不看源码或许你永远也无法明白框架在后面做了什么。从我个人的理解来看我是比较喜欢成熟的框架的。毕竟如果不用框架自己用库函数写最后也可能是一个框架，当然很可能是一个垃圾的框架:D&lt;/p&gt;
&lt;h6 id=&quot;为什么多路IO复用一定是配合的非阻塞socket&quot;&gt;&lt;a href=&quot;#为什么多路IO复用一定是配合的非阻塞socket&quot; class=&quot;headerlink&quot; title=&quot;为什么多路IO复用一定是配合的非阻塞socket&quot;&gt;&lt;/a&gt;为什么多路IO复用一定是配合的非阻塞socket&lt;/h6&gt;&lt;p&gt;妈蛋，这个问题各种说法真是太多了。想一想如果select返回给你一个fd可读，那么他一定是可读的。如果这样那么一般情况下我们用select配合阻塞socket也是可以的。可是现实不这样纸啊。unix手册中明确说明了不是这样的。所以工程上几乎没有见过配合阻塞socket使用的例子。另外asyncore种connect方法用的是connect_ex&lt;/p&gt;
&lt;h3 id=&quot;相关资料&quot;&gt;&lt;a href=&quot;#相关资料&quot; class=&quot;headerlink&quot; title=&quot;相关资料&quot;&gt;&lt;/a&gt;相关资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.python.org/2/library/asyncore.html&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/37271342&quot;&gt;知乎:为什么IO多路复用要搭配非阻塞socket&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;asyncore为select.select、poll的封装(实际上现在大家都使用更为高效的epoll)，变成了框架的使用模式，该库已经作为兼容模式存在，新的库为asyncio。且在2和3中asyncore代码有一点点差异。(源码版本2.7.11)&lt;/p&gt;
    
    </summary>
    
      <category term="源码解析" scheme="http://ficapy.com/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
    
  </entry>
  
  <entry>
    <title>socket.recv</title>
    <link href="http://ficapy.com/2016/06/17/socket_recv/"/>
    <id>http://ficapy.com/2016/06/17/socket_recv/</id>
    <published>2016-06-17T08:06:14.000Z</published>
    <updated>2016-06-17T10:29:45.000Z</updated>
    
    <content type="html">&lt;p&gt;本文仅讨论阻塞socket的情况。在v2ex上看到了2个提问，&lt;a href=&quot;https://www.v2ex.com/t/236313&quot;&gt;socket.recv 完整接收数据&lt;/a&gt;、&lt;a href=&quot;https://www.v2ex.com/t/269954&quot;&gt;python socket 一个很简单的问题把我难住了&lt;/a&gt;.主要会有2个方面。怎么判断数据是否传输完成了进行下一步操作。recv什么时候返回数据，返回多少字节&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;从一个读取文件的例子开始说起&quot;&gt;&lt;a href=&quot;#从一个读取文件的例子开始说起&quot; class=&quot;headerlink&quot; title=&quot;从一个读取文件的例子开始说起&quot;&gt;&lt;/a&gt;从一个读取文件的例子开始说起&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;backup.py&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buffer = f.read(&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(buffer) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data += buffer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子中read是一直有数据返回的，文件读取完成就会一直返回空字符，这样就能判断什么时候完成就停止循环进入下一步操作了。&lt;/p&gt;
&lt;p&gt;可能有些人会应用到socket编程中，recv后得到字符串，判断字符串长度。当长度为0的时候就认为传输完成了。惊奇的是这样写大多数时候居然真的能正常使用。看起来没什么问题。下面是一个例子&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; socket, time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = socket.socket()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.connect((&lt;span class=&quot;string&quot;&gt;&#39;down.sandai.net&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.send(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;GET /thunder7/Thunder_dl_7.9.43.5054.exe HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Host: down.sandai.net&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;User-Agent: curl/7.43.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept: */*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;data = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wait_time = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret = s.recv(&lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(len(ret))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end = time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; end - start &amp;gt; wait_time:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wait_time = end - start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data += ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(ret) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(wait_time)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;上面这个例子请求迅雷下载链接获得数据，在网络正常的时候是没有什么问题的。最后的打印的wait_time大概30左右。这其实是数据传输完成到socket关闭的时间(因为服务端设置了Connection: Keep-Alive且为30秒)。从效率来说数据传输完成我们白白等待了30秒，其次更重要的是&lt;code&gt;仅仅对方服务器执行关闭操作s.recv才会返回空&lt;/code&gt;。万一对方服务器没有写好一直不关闭连接怎么办(不要以为不关闭不可能，不信可以连一下z.cn试一试)。&lt;code&gt;所以从tcp层面来判断数据传输完成是不可取的&lt;/code&gt;，这种需求需要在应用层完成。&lt;/p&gt;
&lt;p&gt;拿应用最广泛的http协议来说。它有明显的传输完成标志。上面的程序改写一下(忽略异常处理，不对chunk进行处理)&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; socket, time, re&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = socket.socket()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.connect((&lt;span class=&quot;string&quot;&gt;&#39;down.sandai.net&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.send(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;GET /thunder7/Thunder_dl_7.9.43.5054.exe HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Host: down.sandai.net&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;User-Agent: curl/7.43.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Accept: */*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;length_re = re.compile(&lt;span class=&quot;string&quot;&gt;r&#39;Content-Length: (\d+)&#39;&lt;/span&gt;,re.MULTILINE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;length, body = -&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ret = s.recv(&lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data += ret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; body &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        body += len(ret)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; body == length:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; length == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;\r\n\r\n&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        length = int(length_re.search(data).group(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        body = len(data.split(&lt;span class=&quot;string&quot;&gt;&#39;\r\n\r\n&#39;&lt;/span&gt;)[-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; length == body:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; len(ret) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(len(data))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(body)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;根据http应用层协议当服务端返回内容的时候，获取Content-Length头部内容然后recv接收所有需要内容后&lt;code&gt;主动关闭连接&lt;/code&gt;,这样就不需要等待服务器关闭连接了。&lt;/p&gt;
&lt;p&gt;另外recv或许还有一个比较容易曲解的地方recv(maxsize)并不是阻塞到直到获取到maxsize长度后才返回。这个地方可以这样理解，把这个IO流当做一个盒子。当盒子里面没有内容的时候recv是阻塞的。某一时刻盒子里面放进了一些内容，不管放进了多少recv会读取最多maxsize内容返回。顺便说一下epoll中边缘触发(edge-triggered)和水平触发(level-triggered)的理解。边缘触发就是当这个盒子中放进数据的时候我通知你一下。水平触发就是当这个盒子中还有数据没有取出的时候我通知你一下。这样就造成了使用边缘触发当通知的时候必须处理完该IO流(试想一下如果你第上一个通知没有处理完，下一个通知的时候也可以处理，依次递推可能造成最后一个通知没有处理完，因为没有下一个通知哒，所以漏处理了一些IO流)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;总结来说就是2个方面。1.recv(maxsize)一有数据就返回并不是积累到maxsize长度再返回。2.判断传输完成不是TCP层面做的事情，应该在应用层处理&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;其他的一些&quot;&gt;&lt;a href=&quot;#其他的一些&quot; class=&quot;headerlink&quot; title=&quot;其他的一些&quot;&gt;&lt;/a&gt;其他的一些&lt;/h3&gt;&lt;h6 id=&quot;keepalive&quot;&gt;&lt;a href=&quot;#keepalive&quot; class=&quot;headerlink&quot; title=&quot;keepalive&quot;&gt;&lt;/a&gt;keepalive&lt;/h6&gt;&lt;p&gt;tcp层面的:是表示当没有tcp报文的时候发送tcp报文给对方。实际上TCP协议规范是只有2小时没有tcp交互才会关闭TCP连接的，可是现实中各种NAT设备并没有遵循该规范，毕竟和性能有关联,如果长时间没有tcp包交互那么可能会中断该TCP连接，此时就有了tcp层面的keepalive，当没有tcp包的时候会自动发送。你以为这样就完了，too naive！有的NAT设备会当tcp中长时间没有有效荷载的时候中断该连接。于是乎有的应用在应用层每隔一段时间发送一个echo数据这样子就能够避免这种情况了。下图设置了keepalive同时对socket设置超时的情况&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;set_keepalive_linux&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(sock, after_idle_sec=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, interval_sec=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, max_fails=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;Set TCP keepalive on an open socket.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    It activates after 1 second (after_idle_sec) of idleness,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    then sends a keepalive ping once every 3 seconds (interval_sec),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    and closes the connection after 5 failed ping (max_fails), or 15 seconds&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sock.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPIDLE, after_idle_sec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPINTVL, interval_sec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_KEEPCNT, max_fails)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s.settimeout(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set_keepalive_osx(s)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;下图是抓包结果&lt;br&gt;&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/2016_06_17_15_47_21.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;可以看到数据传输完成后每隔3秒钟发送了一个tcp包。由于同时设置了settimeout，十秒后没有tcp荷载，客户端断开了连接(&lt;em&gt;注意settimeout设置为秒只对阻塞模式有效&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;http层面的:这个就简单了，http1.0版本以前是请求→返回模式，请求一次就关闭了。因为tcp建立连接是挺耗时的，于是就有了一次数据来回就并不关闭下一个请求接着用。&lt;/p&gt;
&lt;h6 id=&quot;超时检测&quot;&gt;&lt;a href=&quot;#超时检测&quot; class=&quot;headerlink&quot; title=&quot;超时检测&quot;&gt;&lt;/a&gt;超时检测&lt;/h6&gt;&lt;p&gt;我觉得一个好的socket程序肯定会有超时机制和断线重连机制。上面的2个示例。测试中途断开网络再次重连接，会一直卡在recv阶段，对于一个死的TCP链接如果程序无法感知一直卡着绝对是无法接受的。如果是阻塞socket的超时我们只需要设置setttimeout就好了。配合应用层的echo也可以实现长连接。如果使用epoll这些那么settimeout就不行了，就需要自己维护状态检查~~~&lt;/p&gt;
&lt;h3 id=&quot;相关资料&quot;&gt;&lt;a href=&quot;#相关资料&quot; class=&quot;headerlink&quot; title=&quot;相关资料&quot;&gt;&lt;/a&gt;相关资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/12248132/how-to-change-tcp-keepalive-timer-using-python-script&quot;&gt;How to change tcp keepalive timer using python script?&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文仅讨论阻塞socket的情况。在v2ex上看到了2个提问，&lt;a href=&quot;https://www.v2ex.com/t/236313&quot;&gt;socket.recv 完整接收数据&lt;/a&gt;、&lt;a href=&quot;https://www.v2ex.com/t/269954&quot;&gt;python socket 一个很简单的问题把我难住了&lt;/a&gt;.主要会有2个方面。怎么判断数据是否传输完成了进行下一步操作。recv什么时候返回数据，返回多少字节&lt;/p&gt;
    
    </summary>
    
      <category term="network" scheme="http://ficapy.com/categories/network/"/>
    
    
  </entry>
  
  <entry>
    <title>https笔记</title>
    <link href="http://ficapy.com/2016/06/01/https_note/"/>
    <id>http://ficapy.com/2016/06/01/https_note/</id>
    <published>2016-06-01T13:54:21.000Z</published>
    <updated>2016-06-01T16:51:42.000Z</updated>
    
    <content type="html">&lt;p&gt;这年头网络劫持如此普遍，作为搞web开发的说不了解点https都不好意思。简单理解https可以非常简单，可是一旦上升到密码学。ヾ(｡｀Д´｡)牵扯到的概念真是太多了太特么复杂了。鄙人还是从个人实用角度出发。简洁记录一下https相关内容,另外本文作为回顾尚可，不适合作为初次了解https的参考。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;从最简单的角度来说。简单理解HTTPS理解以下字段就好了&lt;code&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/code&gt;.任何稍有常识的程序员一定对RSA公私钥体系有所耳闻。以小白的眼光从最简单的角度来看。第一个请求向服务器请求公匙，服务器返回公匙。客户端验证公匙。客户端使用公匙加密一个密钥传递给服务器，然后就用这个密匙使用AES加密传输数据就完事儿了。妈蛋多好理解啊，可是现实环境总是灰常复杂的T_T。不过总体而言也差不了多少。上图2张。&lt;br&gt;&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/ssl_handshake_rsa.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/2016_06_01_23_20_38.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;wireshark中总体给出了灰常重要的几个关键词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;①Client Hello(发送客户端随机数，支持clipher，一些Extension，最知名的Extension应该是SNI，灰常好理解，就是表明是请求的哪个域名，这样就能够一个IP上放置N个证书哒，然后还有个有趣的东东&lt;a href=&quot;https://github.com/dlundquist/sniproxy&quot;&gt;sniproxy&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;②Server Hello(发送服务端随机数，返回商量好的clipher) &lt;/li&gt;
&lt;li&gt;③Certificate(服务端返回公钥链)&lt;/li&gt;
&lt;li&gt;④Client Key Exchange(就是传递一个密匙哒)Change Cipher Spec(没啥用TLS1.3已被移出)Finished(发送一段加密的验证数据让服务端验证，包含前面几步的一些信息)&lt;/li&gt;
&lt;li&gt;⑤New Session Ticket(你看上面那么多流程，这里缓存一下结果哒，想要快一点下次直接传ticket就可以省掉好多步骤哒，&lt;code&gt;https优化第一事项&lt;/code&gt;)Change Cipher Spec(同上没啥用)Finished(发送一段加密的验证数据让客户端验证)&lt;/li&gt;
&lt;li&gt;⑥Over，开始用AES加密传输&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的步骤协商的clipher suite是TLS_RSA_WITH_AES_128_GCM_SHA256，事实上现在只要你自己不做死，是绝不可能出现这种不安全的clipher suite。因为执行openssl cliphers将会看到所有的RSA都会搭配DH算法一起使用，不会单独存在RSA(鄙人开始自己想看看没有DH交换的https交互是怎样的配置了好半天没成功，因为要自己编译openssl，如果不是灰常了解真做不了这个死。后来偶然发现阿里云CDN配置的https符合试验要求)&lt;/p&gt;
&lt;p&gt;为什么不安全，因为想想看啊，wireshark作为一个嗅探抓包工具，导入个证书就能解密传输数据哒。这就意味着只要别人捕获了你的数据那么有朝一日搞到了你的证书私钥就能解密数据。其实也很好理解，因为这里最终协商的密匙是由3个部分组成2个随机数和使用公钥加密的那个字段，只要别人有了私匙就能用同样的办法计算得到最终的AES加密密匙。由此引入了一个DH密匙交换体系&lt;/p&gt;
&lt;p&gt;介个DH交换咱就不说原理了，可以参照后文参考链接，大意就是双方共有一个key，然后我给你发一个随机明文，你给我发一个随机明文。&lt;code&gt;最后双方就灰常神奇了拥有了同样的密匙&lt;/code&gt;，达到了密匙交换的目的。可是密匙交换体系有个脆弱的地方。如果第三方知道了共有的那个key，就能够被中间人(自己想一下为什么)~~~,引入密匙交换，握手交互就成了下图的样子&lt;br&gt;&lt;img src=&quot;http://ficapy.b0.upaiyun.com/blogimg/ssl_handshake_diffie_hellman.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;这样上面的RSA密匙交换变成了DH交换，就有了PSF(向前安全性,即使有了私钥，那么别人也无法解密以前捕获的数据，因为DH交换的那个密匙算不出来嘛)。可是有了证书之后是可以用来中间人的(想想DH的弱项，要不为何叫向前安全性呢23333)&lt;/p&gt;
&lt;h2 id=&quot;HSTS-HPKP&quot;&gt;&lt;a href=&quot;#HSTS-HPKP&quot; class=&quot;headerlink&quot; title=&quot;HSTS,HPKP&quot;&gt;&lt;/a&gt;HSTS,HPKP&lt;/h2&gt;&lt;p&gt;HSTS:想一想你在地址栏输入一个网址你会去完全输入&lt;em&gt;&lt;a href=&quot;http://www.taobao.com&quot;&gt;http://www.taobao.com&lt;/a&gt;&lt;/em&gt;吗，当然不会！！好多人都会直接输入&lt;em&gt;taobao.com&lt;/em&gt;（当然更多的人会去百毒淘宝）,那么浏览器怎么知道你要访问&lt;em&gt;&lt;a href=&quot;http://taobao.com&quot;&gt;http://taobao.com&lt;/a&gt;&lt;/em&gt;还是&lt;em&gt;&lt;a href=&quot;https://taobao.com&quot;&gt;https://taobao.com&lt;/a&gt;&lt;/em&gt;呢。毕竟https如此安全肯定是首选，然后就有了个http请求头类似下面这个样子&lt;code&gt;Strict-Transport-Security: max-age=31536000; includeSubDomains; preload&lt;/code&gt;客户端第一次收到这种请求就知道了下次要是再访问，那么将直接使用https不再使用http协议，增加安全性避免降级攻击（可以看到凡是开了https的大站点都必定开了此字段并且设置的很长）&lt;/p&gt;
&lt;p&gt;HPKP:相反这个东西就没多大用了╮(╯▽╰)╭，可以试试效果，用chrome或者firefox先访问&lt;em&gt;&lt;a href=&quot;https://scotthelme.co.uk/&quot;&gt;https://scotthelme.co.uk/&lt;/a&gt;&lt;/em&gt; 再访问&lt;em&gt;&lt;a href=&quot;https://hpkp.scotthelme.co.uk/&quot;&gt;https://hpkp.scotthelme.co.uk/&lt;/a&gt;&lt;/em&gt; 会报隐私设置错误。为毛呢，因为有一个header字段是这样的&lt;code&gt;Public-Key-Pins: pin-sha256=&amp;quot;X3pGTSOuJeEVw989IJ/cEtXUEmy52zs1TZQrU06KUKg=&amp;quot;; pin-sha256=&amp;quot;MHJYVThihUrJcxW6wcqyOISTXIsInsdj3xK8QrZbHec=&amp;quot;; pin-sha256=&amp;quot;isi41AizREkLvvft0IRW4u3XMFR2Yg7bvrF7padyCJg=&amp;quot;; pin-sha256=&amp;quot;I/bAACUzdYEFNw2ZKRaypOyYvvOtqBzg21g9a5WVClg=&amp;quot;; pin-sha256=&amp;quot;Y4/Gxyck5JLLnC/zWHtSHfNljuMbOJi6dRQuRJTgYdo=&amp;quot;; pin-sha256=&amp;quot;/oCVQg3nP3DroGpFdAbaiYzenycUftqrH3LAyaIal2g=&amp;quot;; pin-sha256=&amp;quot;0PiItvsnLZy1slbsVPGky8YnDsJavMNtxD0TPwsCdC8=&amp;quot;; pin-sha256=&amp;quot;t3EPvqF+7XoKypCPHyN1b5uey7zTfIGDHn4oBWz2pds=&amp;quot;; pin-sha256=&amp;quot;zqbcEslrpiH0bA9uhNyl2ovpLEfGJQM/QvZSVumMFJ8=&amp;quot;; pin-sha256=&amp;quot;V+J+7lHvE6X0pqGKVqLtxuvk+0f+xowyr3obtq8tbSw=&amp;quot;; pin-sha256=&amp;quot;Myokb3mG16eRkVBE+ZmFSKSpYQzWHKMY1MZbXgA8BkQ=&amp;quot;; pin-sha256=&amp;quot;WSg/oQliyMYyP6yZ0CzDdQ8PHmtUkoUsOsa5svxxXxo=&amp;quot;; pin-sha256=&amp;quot;9lBW+k9EF6yyG9413/fPiHhQy5Ok4UI5sBpBTuOaa/U=&amp;quot;; pin-sha256=&amp;quot;ipMu2Xu72A086/35thucbjLfrPaSjuw4HIjSWsxqkb8=&amp;quot;; pin-sha256=&amp;quot;6OnjvIKf0SxyerXzg9N0RvQ2sgaL6niV+MLn9wBrh+s=&amp;quot;; pin-sha256=&amp;quot;9dNiZZueNZmyaf3pTkXxDgOzLkjKvI+Nza0ACF5IDwg=&amp;quot;; max-age=2592000; includeSubDomains; report-uri=&amp;quot;https://scotthelme.report-uri.io/r/default/hpkp/enforce&amp;quot;&lt;/code&gt;它里面包含了公钥信息，如果和服务端返回的公钥不合那么会报错，为什么会有这个字段嘞，想想CA机制，任何一个可信根证书都能给任意域名提供签名证书然后能骗过浏览器进行中间人(类似实现比如&lt;a href=&quot;https://github.com/droe/sslsplit&quot;&gt;sslsplit&lt;/a&gt;)，该情况就能防止这种情况发生。理想很丰满，现实很骨感，这个字段根本没什么人用，仅有有限的几个网站对此进行了设置，原因就是ヾ(｡｀Д´｡)CA跑去伪造你的域名的概率实在太特么小了，另外HSTS和HPKP都有一个特点那就是第一次访问没有被劫持，只有客户端收到了一个正确的HSTS设置才能对后面的请求发生作用。另外HKPK在浏览器设置代理的情况下是不启用的(应该是为了方便调试)，虽然HPKP如此的废柴。可是在另外一个地方实施却是不错的选择，如果你在APP上添加HPKP验证就能防止那些用fiddler抓包的小白，让抓包失效。如果要抓包请反编译APP去掉HPKP逻辑→_→&lt;/p&gt;
&lt;h2 id=&quot;相关资料&quot;&gt;&lt;a href=&quot;#相关资料&quot; class=&quot;headerlink&quot; title=&quot;相关资料&quot;&gt;&lt;/a&gt;相关资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://cattail.me/tech/2015/11/30/how-https-works.html&quot;&gt;https原理简版&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.helong.info/blog/2015/09/06/tls-protocol-analysis-and-crypto-protocol-design/&quot;&gt;见过最完整的https中文博文&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://scotthelme.co.uk/&quot;&gt;国外讲解https比较多的博客&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://imququ.com&quot;&gt;国内讲解https比较多的博客&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.uuu.com.tw/Public/content/article/140825tips.htm&quot;&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E5%AF%86%E9%91%B0%E4%BA%A4%E6%8F%9B&quot;&gt;Diffie-Hellman中文维基&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/datatheorem/TrustKit&quot;&gt;ios public key pinning&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这年头网络劫持如此普遍，作为搞web开发的说不了解点https都不好意思。简单理解https可以非常简单，可是一旦上升到密码学。ヾ(｡｀Д´｡)牵扯到的概念真是太多了太特么复杂了。鄙人还是从个人实用角度出发。简洁记录一下https相关内容,另外本文作为回顾尚可，不适合作为初次了解https的参考。&lt;/p&gt;
    
    </summary>
    
      <category term="network" scheme="http://ficapy.com/categories/network/"/>
    
    
  </entry>
  
  <entry>
    <title>Gmail设置自动删除推广邮件</title>
    <link href="http://ficapy.com/2016/05/25/gmail_auto_delete_promotions_email/"/>
    <id>http://ficapy.com/2016/05/25/gmail_auto_delete_promotions_email/</id>
    <published>2016-05-25T09:40:01.000Z</published>
    <updated>2016-05-25T10:34:51.000Z</updated>
    
    <content type="html">&lt;p&gt;一直以来我都是多个邮箱混合使用，对Gmail邮箱也不是特别感冒(主力邮箱是outlook(因为没有被墙))。或许是几天没有打开foxmail，刚打开就有那么几十封各种垃圾推广邮件。或许是心情不大好我去搜了下如何过滤掉这些邮件，让他们不会被foxmail客户端接收。于是感受到了outlook和gmail的明显差距，忍不住发篇博文展示下。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;本文是基于一个理念，&lt;strong&gt;被归类为垃圾邮件就没必要展示给用户了&lt;/strong&gt;，设想一下服务商邮件系统已经识别出了某邮件是垃圾邮件，客户端还会依旧下载并显示有多少封垃圾邮件，对于用户看到这样的提示总会忍不住去打开垃圾箱扫几眼。至少对于我来说从没在垃圾箱遇到有用的邮件(有些激活码之类的邮件会手动去检查除外)，这样我们完全可以&lt;strong&gt;把被系统判定为我们不需要的邮件直接删除掉&lt;/strong&gt;，这样就不会由邮件客户端展示在我们面前了，当然以上出自一个前提，应该是比较不重要的邮箱(比如鄙人的个人邮箱)。假如某封对你灰常重要的邮件被自动加到了删除邮件组，30天后就再也看不到了。&lt;/p&gt;
&lt;p&gt;实际上这是一个选择邮件的问题，我们找出邮件然后设定操作。省去对outlook弱鸡流程的吐槽，最坑爹的是它创建规则后不能对历史邮件进行使用。Gmail使用专门的搜索语法，outlook使用选择选择输入文本(看起来对小白友好，效率辣鸡)。归功于Gmail强大的归类。对于自动删除收到的推广邮件在Has the words栏目填写&lt;strong&gt;&lt;span class=&quot;highlight-text red&quot;&gt;category:promotions OR category:social&lt;/span&gt;&lt;/strong&gt;（貌似全篇有用的也就这段语法了，更强大的搜索功能请查看最后给出的相关资料）,至于outlook→→这货不仅没有给邮件默认分类为推广之类的，而且！！垃圾邮件分类都不让你作为规则选择&lt;/p&gt;
&lt;p&gt;再说一下本人对于邮件处理的碎碎念&lt;br&gt;理念就是使用多个邮箱&lt;br&gt;工作邮箱(当然公司都会提供的,这个没什么好处理的，绝逼是不会收到垃圾邮件的，而且邮件也不会删除)&lt;br&gt;个人邮箱(outlook用来注册各种网站，gmail用来邮件交流)&lt;br&gt;QQ邮箱(有些人比较喜欢QQ邮箱，给他们发文件)&lt;br&gt;163邮箱(订阅各种周报weekly使用)&lt;br&gt;另外一个Gmail邮箱(专门订阅邮件组)&lt;br&gt;这样使用foxmail的时候也能比较明确的知道哪些邮件大概是啥类型的XD&lt;/p&gt;
&lt;h2 id=&quot;相关资料&quot;&gt;&lt;a href=&quot;#相关资料&quot; class=&quot;headerlink&quot; title=&quot;相关资料&quot;&gt;&lt;/a&gt;相关资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://duntuk.com/how-create-gmail-filter-automatically-delete-emails-older-x-amount-days&quot;&gt;本文搜索资料&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://support.google.com/mail/answer/7190?hl=en&quot;&gt;gmail高级搜索语法(过滤器通用)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.iplaysoft.com/shou-fa-gmail.html&quot;&gt;国内如何接收Gmail(如果你不会过墙的话)&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来我都是多个邮箱混合使用，对Gmail邮箱也不是特别感冒(主力邮箱是outlook(因为没有被墙))。或许是几天没有打开foxmail，刚打开就有那么几十封各种垃圾推广邮件。或许是心情不大好我去搜了下如何过滤掉这些邮件，让他们不会被foxmail客户端接收。于是感受到了outlook和gmail的明显差距，忍不住发篇博文展示下。&lt;/p&gt;
    
    </summary>
    
      <category term="伪技术" scheme="http://ficapy.com/categories/%E4%BC%AA%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>我的网络学习工具</title>
    <link href="http://ficapy.com/2016/05/24/my_network_learn_tools/"/>
    <id>http://ficapy.com/2016/05/24/my_network_learn_tools/</id>
    <published>2016-05-24T13:26:52.000Z</published>
    <updated>2016-05-25T10:25:52.000Z</updated>
    
    <content type="html">&lt;p&gt;虽然一直在写web后台，可是对底层网络知道的也不多。毕竟这些东西经过层层封装，到web框架时给我们提供的内容已经和TCP/IP相隔很远了。可是作为一个有好奇心的人。我还是会仔细去刨根问底，得到心中的答案。梳理清楚web后台开发中所接触的种种东西。以前总想把东西写简单写点大而全的东西，可是底层网络涉及到的内容真是太特么复杂了。我也只能慢慢来了。工欲善其事必先利其器，本篇列出学习过程中用到的一些网络工具及资源(内容不定期更新)&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;软件&quot;&gt;&lt;a href=&quot;#软件&quot; class=&quot;headerlink&quot; title=&quot;软件&quot;&gt;&lt;/a&gt;软件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;tcpdump/dumpcap/wireshark&lt;/p&gt;
&lt;p&gt; 这应该是最广为人知的数据嗅探工具了，他们之间的区别和联系在stackexchange有一个回答&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wireshark - powerfull sniffer which can decode lots of protocols, lots of filters.&amp;#10; &amp;#10;tshark - command line version of wireshark&amp;#10; &amp;#10;dumpcap (part of wireshark) - can only capture traffic and can be used by wireshark / tshark&amp;#10; &amp;#10;tcpdump - limited protocol decoding but available on most *NIX platforms&amp;#10; &amp;#10;ettercap - used for injecting traffic not sniffing&amp;#10; &amp;#10;All tools use libpcap (on windows winpcap) for sniffing. Wireshark / tshark / dumpcap can use tcpdump filter syntax as capture filter.&amp;#10; &amp;#10;As tcpdump is available on most *NIX system I usually use tcpdump. Depending on the problem I sometimes use tcpdump to capture traffic and write it to a file and the later use wireshark to analyze it. If available I use tshark but if the problem gets more complicated I still like to write the data to a file and then use Wireshark for analysis.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 比较牛的是以上产品均出自The Tcpdump team组织，更牛的是查看github统计数据得知大概主要仅有四个人维护。。。。。。&lt;br&gt; 作为低端用户本人使用tcpdump和wireshark就够了。为了减少数据包。我一般会用vagrant开虚拟机抓包查看请求。使用&lt;code&gt;vagrant ssh -c &amp;quot;sudo tcpdump -i eth0 -s 0 -U -w - not port 22 and tcp&amp;quot; -- -ntt| wireshark -k -i -&lt;/code&gt; 或者 &lt;code&gt;vagrant ssh -c &amp;quot;sudo dumpcap -P -i any -w - -f &amp;#39;not tcp port 22 and tcp&amp;#39;&amp;quot; -- -ntt | wireshark -k -i -&lt;/code&gt; 均可。一般dumpcap没有预装~~。把tcpdump的参数解释下,-i(interface)表示监听某一个接口或全部，-s表示单个数据包最大多少，很明显0代表没限制，-U设置每个包输出为一行，-w保存。后面即为过滤表达式，注意:一定要加上&lt;code&gt;-- -ntt&lt;/code&gt;不加上wireshark会报错，至于为什么我还真没搞明白。。。。很明显使用tcpdump和wireshark最基本的技能是学会过滤表达式的语法，否则过于嘈杂的信息流马上会触发密集恐惧症吧。注意:wireshark中capture filter和display filter是决然不同的语法。快速入门请查看&lt;a href=&quot;http://packetlife.net/media/library/12/tcpdump.pdf&quot;&gt;capture filter速查表&lt;/a&gt;和&lt;a href=&quot;http://packetlife.net/media/library/13/Wireshark_Display_Filters.pdf&quot;&gt;display filter速查表&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 是否对嗅探的原理感到灰常好奇。一图胜千言。希望下面这张图能够初步解决你的疑惑(谷歌搜索图片libpcap)&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/packetfilter.png&quot; alt=&quot;嗅探原理&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.secdev.org/projects/scapy/&quot;&gt;scapy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 大概可以看成是python对libpcap的封装。可以不仅仅可以嗅探，还可以直接构建一个包发送出去(以上wireshark是不支持的)，所支持的协议也是灰常之多。可谓是学习之利器。可以查看&lt;a href=&quot;http://www.secdev.org/projects/scapy/demo.html&quot;&gt;官方DEMO体验下&lt;/a&gt;，不过此软件相对的依赖较多。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.dest-unreach.org/socat/&quot;&gt;socat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 和netcat是一类，据说更强大。至于有多强大我就不知道了。有待以后挖掘。本人也就按照tldr上的示例按需要进行体验了下&lt;code&gt;socat - TCP-LISTEN:8080,fork&lt;/code&gt;感觉是挺好用哒&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jkbrzt/httpie&quot;&gt;httpie&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 某一天我发现github上python类目star数目最多的是这货。然后我就试用了下。。。。。对于调试来说易用性简直秒杀curl无数倍(仅从调试角度)。完全就是python里面requests和urllib的对比哇。使用灰常简单，比如&lt;code&gt;http g.cn -v --debug&lt;/code&gt;(读者不妨亲自体验下),比较值得关注的是httpie的session使用以及它支持配置文件，详情请查看文档&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.telerik.com/fiddler&quot;&gt;fiddler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 主要对应用层http进行处理。它主要使用WinInet自动设置代理或者用户手动设置代理。意味着如果无法设置代理那么该软件是无法捕获到需要的数据的。另外它支持导入pcap格式的报文查看http交互(不能实时灰常可惜)，&lt;a href=&quot;http://docs.telerik.com/fiddler/KnowledgeBase/Proxy&quot;&gt;fiddler原理可查看&lt;/a&gt;。最后放一张图&lt;br&gt; &lt;img src=&quot;http://ficapy.b0.upaiyun.com/blogimg/TrafficFlow.png&quot; alt=&quot;fiddler原理&quot;&gt;    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tldr&lt;/p&gt;
&lt;p&gt; 该软件不属于该类别，可是命令行对于刚接触的新手是不那么有好的。比如tcp -h得到&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    tcpdump version 4.7.3 -- Apple version 67&amp;#10;libpcap version 1.5.3 - Apple version 54&amp;#10;Usage: tcpdump [-aAbdDefhHIJKlLnNOpqRStuUvxX#] [ -B size ] [ -c count ]&amp;#10;&amp;#9;&amp;#9;[ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ]&amp;#10;&amp;#9;&amp;#9;[ -i interface ] [ -j tstamptype ] [ -M secret ]&amp;#10;&amp;#9;&amp;#9;[ -Q metadata-filter-expression ]&amp;#10;&amp;#9;&amp;#9;[ -r file ] [ -s snaplen ] [ -T type ] [ --version ] [ -V file ]&amp;#10;&amp;#9;&amp;#9;[ -w file ] [ -W filecount ] [ -y datalinktype ] [ -z command ]&amp;#10;&amp;#9;&amp;#9;[ -Z user ] [ expression ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 也是灰常容易让人摸不着头脑,&lt;code&gt;tldr tcpdump&lt;/code&gt;可以给出常用的最基本的用法。对于初学者非常友好，能够最开始就体验到神器的强大，这样至少兴趣是产生了吧~~~&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;资源&quot;&gt;&lt;a href=&quot;#资源&quot; class=&quot;headerlink&quot; title=&quot;资源&quot;&gt;&lt;/a&gt;资源&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://packetlife.net/library/cheat-sheets/&quot;&gt;抓包专业资料较多,cheat-sheet值得一看。另外此博客友链也可以看看&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://coolshell.cn/articles/11564.html&quot;&gt;酷 壳–TCP 的那些事儿&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关资料&quot;&gt;&lt;a href=&quot;#相关资料&quot; class=&quot;headerlink&quot; title=&quot;相关资料&quot;&gt;&lt;/a&gt;相关资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Pcap&quot;&gt;libpcap维基百科&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://networkengineering.stackexchange.com/questions/10073/difference-between-sniffer-tools&quot;&gt;tcpdump/dumpcap区别&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://ask.wireshark.org/questions/6660/what-is-the-difference-between-capture-filter-and-display-filter&quot;&gt;capture filter和display filter不同&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://binxian.chetui.org/?p=129&quot;&gt;基于libpcap的sniffer实现&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;虽然一直在写web后台，可是对底层网络知道的也不多。毕竟这些东西经过层层封装，到web框架时给我们提供的内容已经和TCP/IP相隔很远了。可是作为一个有好奇心的人。我还是会仔细去刨根问底，得到心中的答案。梳理清楚web后台开发中所接触的种种东西。以前总想把东西写简单写点大而全的东西，可是底层网络涉及到的内容真是太特么复杂了。我也只能慢慢来了。工欲善其事必先利其器，本篇列出学习过程中用到的一些网络工具及资源(内容不定期更新)&lt;/p&gt;
    
    </summary>
    
      <category term="network" scheme="http://ficapy.com/categories/network/"/>
    
    
  </entry>
  
  <entry>
    <title>openwrt刷机常识</title>
    <link href="http://ficapy.com/2016/05/05/openwrt_recovery_you_need_to_know/"/>
    <id>http://ficapy.com/2016/05/05/openwrt_recovery_you_need_to_know/</id>
    <published>2016-05-05T12:59:17.000Z</published>
    <updated>2016-06-06T14:19:58.000Z</updated>
    
    <content type="html">&lt;p&gt;openwrt刷机教程非常多，可是很多的让人搞不清概念。不明白到底发生了什么，为什么会发生问题。我们最好能在遇到问题前预知为什么会发生问题。以下内容是本人花费一天时间收集到的一些概念内容。因为不是特别了解。可能理解会产生偏差，如有错误请指正。文末会用简短的内容讲一下笔者的刷机过程。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;BootLoader&quot;&gt;&lt;a href=&quot;#BootLoader&quot; class=&quot;headerlink&quot; title=&quot;BootLoader&quot;&gt;&lt;/a&gt;BootLoader&lt;/h2&gt;&lt;p&gt;一般刷机教程中不大会出现该名词，可是它其实是非常重要的。它和我们常听到的BIOS是一类程序–&lt;code&gt;引导程序&lt;/code&gt;，在我们给电脑重装系统的时候通常都是开机的时候按特定的功能键然后进入图形界面和BIOS交互。openwrt刷机中其实也非常类似，只是交互的方式不同→→→直接造成了下面几个名词的产生&lt;/p&gt;
&lt;h2 id=&quot;不死UBoot&quot;&gt;&lt;a href=&quot;#不死UBoot&quot; class=&quot;headerlink&quot; title=&quot;不死UBoot&quot;&gt;&lt;/a&gt;不死UBoot&lt;/h2&gt;&lt;p&gt;即为上面描述的&lt;code&gt;引导程序&lt;/code&gt;的一种(即还有别的引导程序)。试想我们给电脑装系统的时候。无论怎么失败，都是可以进入BIOS设置，然后一次次的重装系统的。可是有的openwrt的引导程序则不同。他们只给你一次失败的机会。如果失败就要用特殊的手段重装(比如TTL串口)，不死Uboot即相对那种失败就死的Bootloader而言的(其实感觉这应该是一个理所当然的自带功能,然而并没有)。不死UBoot提供这样的交互→→→如果刷机失败，无法ssh进入到openwrt系统，那么Uboot提供一个web服务，路由器运行的时候直接通过LAN接口连接电脑，然后通过web页面上传固件刷机。这样无论刷固件如何失败。都可以反复刷固件。&lt;code&gt;可以看出不死Uboot它只是提供了一种比较方便的和引导程序交互的途径&lt;/code&gt;。其他常见途径还包括自动读取U盘里面的固件、使用TTL串口等&lt;/p&gt;
&lt;h2 id=&quot;TTL刷机&quot;&gt;&lt;a href=&quot;#TTL刷机&quot; class=&quot;headerlink&quot; title=&quot;TTL刷机&quot;&gt;&lt;/a&gt;TTL刷机&lt;/h2&gt;&lt;p&gt;听起来很高大上有没有，其实也仅仅只是和BootLoader进行交互的一种手段。所以如果你感觉它能解救任何砖机那就大错特错了。因为它需要设备预留口而且需要TTL串口设备，所以普通玩家是不会太有机会通过该方法刷机的，不死Uboot通过web交互，TTL刷机通过TTL串口。所以他们并没有实质的区别，都是和boot进行交互。&lt;/p&gt;
&lt;h2 id=&quot;mtd&quot;&gt;&lt;a href=&quot;#mtd&quot; class=&quot;headerlink&quot; title=&quot;mtd&quot;&gt;&lt;/a&gt;mtd&lt;/h2&gt;&lt;p&gt;Memory_Technology_Device,如果执行命令刷机，那么在教程中mtd这个词并不陌生，它提供&lt;code&gt;对文件系统读写的接口&lt;/code&gt;（描述可能不准确）。和linux中的dd差不多吧&lt;/p&gt;
&lt;h2 id=&quot;锁UBoot&quot;&gt;&lt;a href=&quot;#锁UBoot&quot; class=&quot;headerlink&quot; title=&quot;锁UBoot&quot;&gt;&lt;/a&gt;锁UBoot&lt;/h2&gt;&lt;p&gt;即限制mtd去擦写u-boot分区。如果执行命令写入的时候提示被锁就是锁了(好像是废话)。解决办法就是先刷一个允许写入u-boot分区的固件，当然锁住也不是完全没道理的，因为刷uboot是刷openwrt中危险性最高的一步。当然也有恶心的产品同时限制你擦写固件分区，比如极路由3。遇上这种普通方法无解了。既然刷uboot风险高，那么为何要刷呢。我想因为是自带的BootLoader不支持不死这种方式造成的，或者官方通过boot限制安装非官方固件&lt;/p&gt;
&lt;h2 id=&quot;Flash-内存等参数&quot;&gt;&lt;a href=&quot;#Flash-内存等参数&quot; class=&quot;headerlink&quot; title=&quot;Flash/内存等参数&quot;&gt;&lt;/a&gt;Flash/内存等参数&lt;/h2&gt;&lt;p&gt;下载玩家自制固件的时候需要知道自己的设备参数，可以通过&lt;a href=&quot;https://wiki.openwrt.org/toh/start&quot;&gt;openwrt官方查找&lt;/a&gt;。ssh进入openwrt可以通过free查看内存大小。注意通过df -h查看到的并不是Flash大小，至于为什么我也不大明白。&lt;/p&gt;
&lt;h2 id=&quot;刷机小总结&quot;&gt;&lt;a href=&quot;#刷机小总结&quot; class=&quot;headerlink&quot; title=&quot;刷机小总结&quot;&gt;&lt;/a&gt;刷机小总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ssh进入openwrt，小心谨慎使用mtd刷不死uboot(因为该步成功后刷固件失败也可安然无恙，so该步收益大于风险)，当然要是你这一步就失败了。机器基本就变砖了。因为TTL这类科技也是和boot交互的。boot都被刷挂了。基本没戏了，只能通过专用设备写入来解决了&lt;/li&gt;
&lt;li&gt;有了不死uboot这类科技护体，意味着你只要不要乱作死去随便反复刷boot那么反反复复刷固件都是没事的，即使刷固件变砖。另:有没有看到网上很多教程都写的通过LAN口来刷固件，其实看完上面的一些概念，是完全不需要这样的(因为有的笔记本并没有LAN接口)。进入到openwrt里面通过mtd刷固件和进入到uboot的web页面并没有任何区别&lt;/li&gt;
&lt;li&gt;选择固件的时候可以在淘宝上找店主。毕竟别人存货多XD&lt;/li&gt;
&lt;li&gt;网上找几个和自己一样设备的教程贴，思索下别人的操作发生了什么。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原厂固件和sysupgrade的区别见参考资料最后一个链接&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;笔者刷机过程&quot;&gt;&lt;a href=&quot;#笔者刷机过程&quot; class=&quot;headerlink&quot; title=&quot;笔者刷机过程&quot;&gt;&lt;/a&gt;笔者刷机过程&lt;/h2&gt;&lt;p&gt;因为我的路由出厂就是不死uboot，所以我在收集了一天资料之后，进行了如下操作&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;下载固件firmware&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scp firmware root@&lt;span class=&quot;number&quot;&gt;192.168&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;8.1&lt;/span&gt;:/tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mtd -r write /tmp/firmware firmware&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;over 然后等两三分钟就好了，当然我凭着好奇的心理随便刷了几个别的固件。很不出意外的变砖了。然后通过LAN连接，再刷就好了&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.shuyz.com/fix-openwrt-connection-with-putty.html&quot;&gt;关于串口TTL、USB转接实例(含图)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.right.com.cn/forum/thread-154561-1-1.html&quot;&gt;关于刷UBoot&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.v2ex.com/t/160078&quot;&gt;不死uboot在v2ex上的一个讨论&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/xcoderone/article/details/48030771&quot;&gt;TTL线刷原理&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.right.com.cn/forum/forum.php?mod=viewthread&amp;amp;tid=54647#pid392795&quot;&gt;另一个TTL线刷原理&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/xcoderone/article/details/48031279&quot;&gt;再来一个TTL线刷实例&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://wiki.openwrt.org/doc/techref/bootloader&quot;&gt;关于BootLoader&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.atime.me/research/openwrt-pandorabox-introduction.html&quot;&gt;初探OpenWrt&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_Technology_Device&quot;&gt;MTD维基百科介绍&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.crifan.com/files/doc/docbook/linux_nand_driver/release/webhelp/mtd_memory_technology_device.html&quot;&gt;MTD扩展阅读&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://myop.cf/archives/546&quot;&gt;如果你看不懂这篇文章，那么全篇你是白看了&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;openwrt刷机教程非常多，可是很多的让人搞不清概念。不明白到底发生了什么，为什么会发生问题。我们最好能在遇到问题前预知为什么会发生问题。以下内容是本人花费一天时间收集到的一些概念内容。因为不是特别了解。可能理解会产生偏差，如有错误请指正。文末会用简短的内容讲一下笔者的刷机过程。&lt;/p&gt;
    
    </summary>
    
      <category term="伪技术" scheme="http://ficapy.com/categories/%E4%BC%AA%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>阿里云OSS绑定letsencrypt证书</title>
    <link href="http://ficapy.com/2016/03/11/letsencrypt_aliyun_oss/"/>
    <id>http://ficapy.com/2016/03/11/letsencrypt_aliyun_oss/</id>
    <published>2016-03-11T10:28:34.000Z</published>
    <updated>2016-05-30T10:41:42.000Z</updated>
    
    <content type="html">&lt;p&gt;继上篇文章之后，讲解阿里云OSS绑定letsencrypt。其实网上讲述letencrypt使用方法的文章非常之多。本篇文章笔者将会讲解一些其他的比较浅显的原理。即为什么要这样做。该步骤到底发生了什么，对于实际操作步骤，请参照最后的参考链接。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于RSA的那些事儿&quot;&gt;&lt;a href=&quot;#关于RSA的那些事儿&quot; class=&quot;headerlink&quot; title=&quot;关于RSA的那些事儿&quot;&gt;&lt;/a&gt;关于RSA的那些事儿&lt;/h2&gt;&lt;p&gt;web安全离不开RSA非对称加密算法，说真的数学原理我没看明白。仅仅知道最后生成的公钥和私钥其实都是一对数字。可是我们经常看到生成的公私钥是字符串。其实它只是经过了一些编码(下见参考)。然后一个密钥用来加密一个密钥用来解密（意味着公私钥都能加密）。其次是签名，签名就是将需要签名的信息使用信息摘要算法（比如sha256）获取摘要。然后使用私钥进行加密，对方使用相同的步骤算出摘要，然后使用公钥对你加密的信息进行解密。如果解密的信息和算出摘要的信息相同则证明该信息完整且为对方发出。其实和HMAC相当的相似，只不过HMAC使用对称密钥。再其实。签名算法都差不多这样OVER&lt;/p&gt;
&lt;h2 id=&quot;关于letsencrypt的内部流程&quot;&gt;&lt;a href=&quot;#关于letsencrypt的内部流程&quot; class=&quot;headerlink&quot; title=&quot;关于letsencrypt的内部流程&quot;&gt;&lt;/a&gt;关于letsencrypt的内部流程&lt;/h2&gt;&lt;p&gt;本节参考&lt;a href=&quot;https://github.com/diafygi/acme-tiny/blob/master/acme_tiny.py&quot;&gt;acme-tiny脚本&lt;/a&gt;。过程中最重要的为用户认证流程。普遍的用户认证流程为获取token，即用户登录获取token，后续的API请求和该token关联。然而letsencrypt的流程非常不同(主要因为它不需要去letsencrypt网站进行注册)。一个独立的账户依靠本地生成证书来认证&lt;code&gt;openssl genrsa 4096 &amp;gt; account.key&lt;/code&gt;，该证书为PEM证书。即文件中含有公钥和私钥。对于所有的API请求都会要求签名。&lt;br&gt;签名代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_send_signed_request&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(url, payload)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    payload64 = _b64(json.dumps(payload).encode(&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected = copy.deepcopy(header)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected[&lt;span class=&quot;string&quot;&gt;&quot;nonce&quot;&lt;/span&gt;] = urlopen(CA + &lt;span class=&quot;string&quot;&gt;&quot;/directory&quot;&lt;/span&gt;).headers[&lt;span class=&quot;string&quot;&gt;&#39;Replay-Nonce&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected64 = _b64(json.dumps(protected).encode(&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    proc = subprocess.Popen([&lt;span class=&quot;string&quot;&gt;&quot;openssl&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;dgst&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-sha256&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-sign&quot;&lt;/span&gt;, account_key],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    out, err = proc.communicate(&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;0&amp;#125;.&amp;#123;1&amp;#125;&quot;&lt;/span&gt;.format(protected64, payload64).encode(&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; proc.returncode != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; IOError(&lt;span class=&quot;string&quot;&gt;&quot;OpenSSL Error: &amp;#123;0&amp;#125;&quot;&lt;/span&gt;.format(err))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data = json.dumps(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;header&quot;&lt;/span&gt;: header, &lt;span class=&quot;string&quot;&gt;&quot;protected&quot;&lt;/span&gt;: protected64,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;payload&quot;&lt;/span&gt;: payload64, &lt;span class=&quot;string&quot;&gt;&quot;signature&quot;&lt;/span&gt;: _b64(out),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        resp = urlopen(url, data.encode(&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; resp.getcode(), resp.read()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; IOError &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getattr(e, &lt;span class=&quot;string&quot;&gt;&quot;code&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;), getattr(e, &lt;span class=&quot;string&quot;&gt;&quot;read&quot;&lt;/span&gt;, e.__str__)()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出从证书中取出公钥。然后依照&lt;code&gt;公钥+(公钥+服务器随机数+信息)+第二部分的签名&lt;/code&gt;证明自己的身份。即：一个公钥对应一个身份。&lt;br&gt;后续的流程就是：①身份注册→→→→②获取域名列表→→→→(③发送http挑战请求→→→→④根据返回内容建立文件→→→→⑤自身测试下载→→→→⑥发送挑战测试请求)→→→→⑦提交csr文件返回签名证书&lt;/p&gt;
&lt;h2 id=&quot;移植到OSS上&quot;&gt;&lt;a href=&quot;#移植到OSS上&quot; class=&quot;headerlink&quot; title=&quot;移植到OSS上&quot;&gt;&lt;/a&gt;移植到OSS上&lt;/h2&gt;&lt;p&gt;网上大多数教程都是部署到服务器。和部署到OSS最大的差别在于上面的划括号的部分。部署在服务器上是在服务器生成文件，如果部署到阿里云OSS，则应该上传文件到阿里云。没有别的区别。另外还可以使用DNS挑战。如果你使用cloudxns作DNS解析。也可以使用它，从而通过验证，另外一点。生成的证书文件需要在阿里云CDN设置页面设置。&lt;code&gt;然而！！！阿里云并没有提供API接口！！！&lt;/code&gt;，意味着需要手工操作。然而至少每3个月更新一次还是很频繁的。。。。。。所以，要真用在上面还得三思&lt;br&gt;&lt;a href=&quot;https://gist.github.com/Ficapy/2cef398fc4ee18013836&quot;&gt;这是我参照acme-tiny改写的证书脚本&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;hexo使用的一些建议&quot;&gt;&lt;a href=&quot;#hexo使用的一些建议&quot; class=&quot;headerlink&quot; title=&quot;hexo使用的一些建议&quot;&gt;&lt;/a&gt;hexo使用的一些建议&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;将图片文件进行压缩放到CDN上面。压缩工具灰常之多。笔者就不例举了&lt;/li&gt;
&lt;li&gt;引用的国外JS文件能换成国内镜像源的全部替换&lt;/li&gt;
&lt;li&gt;上传图片不如试试我写的脚本&lt;a href=&quot;https://gist.github.com/Ficapy/8c57998d14c434ab5df3&quot;&gt;https://gist.github.com/Ficapy/8c57998d14c434ab5df3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;swiftype加载真的好慢好慢。如果为了加载速度绝对要替换掉&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html&quot;&gt;RSA算法原理&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%87%91%E9%91%B0%E9%9B%9C%E6%B9%8A%E8%A8%8A%E6%81%AF%E9%91%91%E5%88%A5%E7%A2%BC&quot;&gt;HMAC中文维基&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.sina.com.cn/s/blog_4fcd1ea30100yh4s.html&quot;&gt;pem格式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://imququ.com/post/letsencrypt-certificate.html&quot;&gt;letsencrypt部署&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;继上篇文章之后，讲解阿里云OSS绑定letsencrypt。其实网上讲述letencrypt使用方法的文章非常之多。本篇文章笔者将会讲解一些其他的比较浅显的原理。即为什么要这样做。该步骤到底发生了什么，对于实际操作步骤，请参照最后的参考链接。&lt;br&gt;
    
    </summary>
    
      <category term="伪技术" scheme="http://ficapy.com/categories/%E4%BC%AA%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>将hexo部署到阿里云OSS</title>
    <link href="http://ficapy.com/2016/03/06/install_hexo_to_aliyun_oss/"/>
    <id>http://ficapy.com/2016/03/06/install_hexo_to_aliyun_oss/</id>
    <published>2016-03-06T14:34:00.000Z</published>
    <updated>2016-03-07T03:04:49.000Z</updated>
    
    <content type="html">&lt;p&gt;最近把博客从wordpress迁移到hexo,主要原因是wordpress太过臃肿。一个个人博客完全不需要那么多的功能。这么多年过去了都没有一个完美的支持markdown方案，然而随着github的流行，程序员社区早已将markdown作为最佳写博客手段！生成静态博客的框架众多。为什么笔者会选择使用hexo。没别的，JS社区一片繁荣(挖坑小能手众多),甚至hexo官网有整站中文化。&lt;/p&gt;
&lt;p&gt;注: 该方案同样适用于又拍及七牛&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;至于怎么安装,如何使用hexo本文就不表述了,请查看官网以及&lt;code&gt;hexo --help&lt;/code&gt;。说一下我遇到的几个问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于npm、pip、gem或者其他的包管理系统在国内请使用镜像源,比如中科大、淘宝等&lt;/li&gt;
&lt;li&gt;对于osx系统，请使用&lt;code&gt;npm install hexo --no-optional&lt;/code&gt;安装，参见&lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;由于hexo框架的升级或者使用环境的不同。有可能导致你使用的主题出现错误。搜索主题的提问信息一般会有答案&lt;/li&gt;
&lt;li&gt;将导出的wordpress文件使用hexo官方推荐的hexo-migrator-wordpress很可能会失败。此时不必纠结,实质就是将xml文件转换成markdown。可用的方法有很多。我使用的是&lt;a href=&quot;http://docs.getpelican.com/en/latest/importer.html&quot;&gt;pelican推荐的做法&lt;/a&gt;,转换出来有些不标准的需要脚本辅助手工完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面说一下安装hexo到阿里云oss的要点，他们最大的区别就是:OSS不能正常的处理请求文件的类型也就是header中Content-Type字段。默认会返回application/octet-stream。意味着请求该资源浏览器会直接下载，而不是正常的解析，所以需要手动指定。另外OSS不能使用相对路径进行访问(因为它的设计就是用作存储，而不是web服务器)。&lt;code&gt;比如访问a.com\b\并不会返回a.com\b\index.html的内容&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;解决以上2个问题的方案就是。对每个上传的文件根据文件名后缀得到其mime指定Content-Type字段。将hexo生成的所有html中href进行处理：将他们的路径加上index.html如果此路径在本地存在文件。则将该路径换成绝对路径。例如\b或者\b\换成\b\index.html。python2示例代码如下,依赖requests、lxml&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Author: Ficapy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; base64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; hmac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; os.path &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; join, exists, relpath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; mimetypes &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; MimeTypes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; hashlib &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sha1, md5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pickle &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; dump, loads&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; cStringIO &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; StringIO, InputType, OutputType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; lxml &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;KEY             = &lt;span class=&quot;string&quot;&gt;&#39;----------&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SECRET          = &lt;span class=&quot;string&quot;&gt;&#39;----------&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BUCKET          = &lt;span class=&quot;string&quot;&gt;&#39;----------&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;url             = &lt;span class=&quot;string&quot;&gt;&#39;----------&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ABSOLUTE_PATH   = &lt;span class=&quot;string&quot;&gt;&#39;/Users/Ficapy/CodeSpace/Blog/public&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = requests.Session()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;headers = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Date&#39;&lt;/span&gt;: datetime.datetime.utcnow().strftime(&lt;span class=&quot;string&quot;&gt;&#39;%a, %d %b %Y %H:%M:%S GMT&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;text/html&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;HOST&#39;&lt;/span&gt;: url,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(file_path)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; headers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path = join(ABSOLUTE_PATH, file_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    headers[&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;] = MimeTypes().guess_type(path)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;text/html&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sign = base64.b64encode(hmac.new(SECRET,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     &lt;span class=&quot;string&quot;&gt;&#39;PUT&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     + &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     + headers[&lt;span class=&quot;string&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     + headers[&lt;span class=&quot;string&quot;&gt;&#39;Date&#39;&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                     + &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt; + BUCKET + &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt; + file_path, sha1).digest()).strip()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    headers.update(&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;Authorization&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;OSS &#39;&lt;/span&gt; + KEY + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + sign&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read_in_chunks&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(file_object, blocksize=&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file_object = file_object &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; isinstance(file_object, (InputType, OutputType)) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; open(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        join(ABSOLUTE_PATH, file_object))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file_object.seek(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data = file_object.read(blocksize)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; data:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;upload&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(file_path, file_object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signature(file_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.put(&lt;span class=&quot;string&quot;&gt;&#39;http://&#39;&lt;/span&gt; + url + &lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt; + file_path, headers=headers, data=read_in_chunks(file_object)).raise_for_status()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;upload done: &#39;&lt;/span&gt; + file_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 首先请求oss_fuck_md5文件,没有则全部上传  有则和生成的md5对比,本地文件不存在或变动则上传&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 所有文件上传成功后最后上传.oss_fuck_md5文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;local_md5&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file_md5_mp = &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; root, dirnames, files &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; os.walk(ABSOLUTE_PATH):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; files:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            fullpath = join(root, file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rel = relpath(fullpath, ABSOLUTE_PATH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            file_md5_mp[rel] = md5(open(fullpath).read()).hexdigest()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; file_md5_mp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;remote_md5&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = s.get(&lt;span class=&quot;string&quot;&gt;&#39;http://&#39;&lt;/span&gt; + url + &lt;span class=&quot;string&quot;&gt;&#39;/oss_fuck_md5&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; a.status_code != &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; loads(a.content)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;path_process&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(file_path)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    file_path = join(ABSOLUTE_PATH, file_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tree = html.parse(file_path).getroot()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hrefs = tree.xpath(&lt;span class=&quot;string&quot;&gt;&#39;//*[@href]&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, href &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(hrefs):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rewrite = join(href.attrib[&lt;span class=&quot;string&quot;&gt;&#39;href&#39;&lt;/span&gt;].split()[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&#39;index.html&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; exists(join(ABSOLUTE_PATH, rewrite[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:])):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            hrefs[i].attrib[&lt;span class=&quot;string&quot;&gt;&#39;href&#39;&lt;/span&gt;] = rewrite&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f = StringIO()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f.write(html.tostring(tree))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    remote = remote_md5()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    locals = local_md5()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _locals = locals.copy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; local &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; _locals.keys():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _locals[local] != remote.get(local, &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            locals.pop(local)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; path &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; locals.keys():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; path.endswith(&lt;span class=&quot;string&quot;&gt;&#39;html&#39;&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            upload(path, path_process(path))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            upload(path, path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f = StringIO()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dump(_locals, f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    upload(&lt;span class=&quot;string&quot;&gt;&#39;oss_fuck_md5&#39;&lt;/span&gt;, f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    main()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来就是绑定域名了,oss管理页面找找就有了。灰常简单，在下一篇将会阐述如何使用免费的letsencrypt生成证书绑定在阿里云CDN上以及做一些简单的优化。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近把博客从wordpress迁移到hexo,主要原因是wordpress太过臃肿。一个个人博客完全不需要那么多的功能。这么多年过去了都没有一个完美的支持markdown方案，然而随着github的流行，程序员社区早已将markdown作为最佳写博客手段！生成静态博客的框架众多。为什么笔者会选择使用hexo。没别的，JS社区一片繁荣(挖坑小能手众多),甚至hexo官网有整站中文化。&lt;/p&gt;
&lt;p&gt;注: 该方案同样适用于又拍及七牛&lt;br&gt;
    
    </summary>
    
      <category term="伪技术" scheme="http://ficapy.com/categories/%E4%BC%AA%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>观影感</title>
    <link href="http://ficapy.com/2015/05/26/film_reviews/"/>
    <id>http://ficapy.com/2015/05/26/film_reviews/</id>
    <published>2015-05-26T13:41:00.000Z</published>
    <updated>2016-03-03T09:13:24.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;我的影评我做主-想怎么写就怎么写-就是这么任性&quot;&gt;&lt;a href=&quot;#我的影评我做主-想怎么写就怎么写-就是这么任性&quot; class=&quot;headerlink&quot; title=&quot;我的影评我做主,想怎么写就怎么写,就是这么任性~~~~&quot;&gt;&lt;/a&gt;我的影评我做主,想怎么写就怎么写,就是这么任性~~~~&lt;/h4&gt;&lt;h4 id=&quot;《12公民》-15-5-23&quot;&gt;&lt;a href=&quot;#《12公民》-15-5-23&quot; class=&quot;headerlink&quot; title=&quot;《12公民》-15.5.23&quot;&gt;&lt;/a&gt;《12公民》-15.5.23&lt;/h4&gt;&lt;p&gt;据说是根据&lt;strong&gt;《12罗汉》改编&lt;/strong&gt;，没看过12罗汉，看过之后感觉这部电影还挺好。小成本的人文片故事讲的好也挺值得回味的。&lt;/p&gt;
&lt;p&gt;电影讲述的是一个牛逼检察官通过他理性的分析一步步还原了“富二代手刃生父”案件的真相。&lt;/p&gt;
&lt;p&gt;以下12个男主角(突然想到为嘛没女的呢，终于想到这么多年我好像第一次看到没有男女猪脚fall&lt;br&gt;in love的片子)：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1号:团长,好像就做了记录工作，宣布投票，记得的镜头就是几次被别人搞的不赖烦。冒出了you&lt;br&gt;can you&lt;br&gt;up。生气之后被8号的义正言辞所打动,给了个把椅子摆正的镜头。然后，阿勒。每个人被策反之前都有那么写内心深处的独白。为毛你啥都没有呢~&lt;/li&gt;
&lt;li&gt;2号:工程师,绝佳的头脑，加减乘除不在话下，作为第一个发言的，其实他啥也没说，除了呵呵没什么太深刻的印象&lt;/li&gt;
&lt;li&gt;3号:司机。暴脾气,最固执的一个人了，反正父母啥时候都是对的。就好像以前某人会说我自己认为是好的不要认为别人也喜欢。&lt;/li&gt;
&lt;li&gt;4号:房地产开发商,作为一个成功人士还是挺有思想的，其认为明确有罪的理由大概有①小孩回家后直接会房并没有人看到他②死者身上的刀小孩有一把并且不见了③下层老爷爷的口述④对面妇女的口述.坚持自己的看法直至每个看法都被合理的质疑。只是为什么有那么几个镜头感觉看8号的镜头有那么点不对呢，不是Gay？&lt;/li&gt;
&lt;li&gt;5号:黑社会,从识别匕首来看还是有两把刷子。有些冷酷？因为这个身份被贴上不良分子的TAG咯？从TAG这个角度来看他和富二代是最为相似的。给人的感觉就是没有良好的品行，不怀疑你怀疑谁~~~算是TAG上的悲哀吧，只是没多大明白小伙子穿一件单衬衫为什么会流汗漏出了后背的纹身&lt;/li&gt;
&lt;li&gt;6号:北京人,记得看过他演的《正阳门下》，剧中情节差不多都忘记咯~&lt;/li&gt;
&lt;li&gt;7号:小贩,社会底层人民的声音有谁会在意，谁会去倾听。&lt;/li&gt;
&lt;li&gt;8号:检察官，猪脚光环咯，柯南附体咯，你丫有备而来，现场还频频灵光闪现。好像在影视作品中也经常见到他当正派官方角色。应该是一位智者吧。&lt;/li&gt;
&lt;li&gt;9号:文革老人，姜还是老的辣，能发现别人所发现不了的微小细节。我当时就想，莫非大爷年轻的时候也犯过不少错？&lt;/li&gt;
&lt;li&gt;10号:老北京？我也不知道咋称呼好。这货极度排外啊，一上来就是河南人咋地，外地人咋地。经常打断别人的话，不占据理就拍桌子~~想起了那句话，事实有利就讲事实，法律有利就讲法律，两都没利就拍桌子把水搅浑。已经占据了良好的资源却仍不知足。房子租给外地人却嫌弃外地人压榨了北京人的生活环境，说自己儿子学习到凌晨3点被外地人竞争的一个好的大学都上不了。我们都是过来人，如若真的如此努力会酱紫？笑cry~~从另外一个方面来说，这位是过度考虑自己的孩子的未来么。&lt;/li&gt;
&lt;li&gt;11号:保安，这个角色让人伤感啊。是一个立志成为公检人员的好保安？因为工作关系知道地铁的长度，知道速度，咋就t=s/v都不造呢&lt;/li&gt;
&lt;li&gt;12号：墙头草？从这个角色来看投票制度发现设置中立选项很有必要。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为故事讲的好，反映的问题非常多。每个人看过之后应该都有那么几个侧重点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;教育：教育的结果就是一张毕业证。没有这个证就不好找工作。十二位也是为了这个被迫参加讨论，话说让家长在那么个破废弃仓库研讨有点脱离实际了。12比0正好促进了情节的发展。&lt;/li&gt;
&lt;li&gt;标签：了解一件事情很难，更何况仅凭一面之词，想想我们在网上看到的一些网文便迅速给出回复。谁写的煽情，谁文笔好，谁给出对自己有利的证据舆论往往会偏向某一方。黑社会和富二代这些标签都会蒙蔽了我们的思考。苏轼说横看成岭侧成峰，远近高低各不同，不识庐山真面目，只缘身在此山中。可惜咯，往往事实呈现在我们面前的只是冰山一角。当事人的感受我们是没法体会的。so,我应该远离那些无意义的争论。变得更加理性一些&lt;/li&gt;
&lt;li&gt;话语：最开始大家都不愿意讨论，有什么可讨论的，讨论又没有用~~。最典型的是小贩。一个苹果换一个苹果最后还是一个苹果，一个想法换另外一个想法最后是两个想法。当大家都不愿意相信自己的话语能够改变什么就变得不愿去交换自己真实的想法，因为没什么卵用。可是坚持正确的发声总是好的，合理表达出自己的观点。最后小贩得到了保安的尊重，检察官的儿子也买了好多冰棍，大家对待事物都有了更好的看法。&lt;/li&gt;
&lt;li&gt;尊重：好吧,我也对这方面知之甚少&lt;/li&gt;
&lt;li&gt;事业：正如房地产开发商所说（这货还真发表了好多有意思的看法呢），不要看到富人就觉得别人背地里干了见不得人的勾当，自己穷应该反思自己没本事。然后是干女儿：咱两是奔着结婚去的&amp;amp;&amp;amp;看见好女孩从好车上下来就管人家叫傍大款，你那是嫉妒！那是对中国优秀女青年的侮辱~~，其实里面经典台词还是挺多的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总结来说这是一部我能看2遍的电影，能看2遍的电影对我来说都是挺有意思的电影&lt;/p&gt;
&lt;h3 id=&quot;《哆啦A梦·伴我同行》-15-5-30&quot;&gt;&lt;a href=&quot;#《哆啦A梦·伴我同行》-15-5-30&quot; class=&quot;headerlink&quot; title=&quot;《哆啦A梦·伴我同行》-15.5.30&quot;&gt;&lt;/a&gt;《哆啦A梦·伴我同行》-15.5.30&lt;/h3&gt;&lt;p&gt;本以为会有很多小孩子的，结果怎么没几个啊喂~~或许是因为我动漫看的不多的缘故，非常喜欢这种简洁清爽的CG画风，感觉很舒服,也很细致。还是非常小的时候看过一些机器猫。&lt;/p&gt;
&lt;p&gt;我脑海中记得的景象居然是大雄每次考试考0分，怎么没有受到爸爸妈妈的男女混合双打啊，一家人还其乐融融。不过在救静香的时候能想到让自己的记忆穿越时空传递&lt;br&gt;给未来的自己智商还是很高的好么~~小孩子真的特别天真改变自己也很快哈。奋起学习是分分钟的事情(还真不是三分钟热度)。面对失败(努力学数学结果语文考试得0分)也可以分分钟放弃，在困难的时候机器猫点醒了大雄是多么的重要。前面的时候大雄依靠种种外力结果原来越远，关键的时候还是得靠自己是不。&lt;/p&gt;
&lt;p&gt;最后静香他爸是这样评价大雄的，因为别人开心而开心，因为别人的幸福而幸福，他一定会给你幸福的。成年的大雄依然保持着这样善良的心。我已&lt;em&gt;无语凝噎。故事里大雄和静香幸福的生活在了一起。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;《末日崩塌》-2015-6-6&quot;&gt;&lt;a href=&quot;#《末日崩塌》-2015-6-6&quot; class=&quot;headerlink&quot; title=&quot;《末日崩塌》-2015.6.6&quot;&gt;&lt;/a&gt;《末日崩塌》-2015.6.6&lt;/h3&gt;&lt;p&gt;哇哦，写这篇影评都是两周后了，真是懒散啊~~，这篇电影给我的感觉就是不太值得一看&amp;gt;&lt;em&gt;&amp;lt;。以前想着要是地震的时候在天上开飞机会是咋样的呢，没有飞机跳到河里去会是咋样的呢。卧槽，结果地震的时候男主还真的是在开飞机，搞的我都以为全片会一直开飞机开到结束的Orz~~整片就是看特效的。大楼抖动，大楼出现裂纹。大楼倾斜。可能是大地断裂啥的特效表现效果不是太好做，所以地点选在了旧金山。嗯&lt;br&gt;之后就是水特效啦。当然特效效果真的还是挺不错的。再说这是一部主角光环爆满的电影。发生地震的时候男主有飞机，飞机没油了男主到了非地震区有汽车，明显如果一直开汽车对这种长距离时间是完全不够用的，于是乎男主又开上了飞机(可是为啥最后在大桥那里有看到了那对年老的爷爷奶奶)。最后降落在足球场时展开双臂是不是有些模仿了《泰坦尼克号》的Jake和Rose呢（→&lt;/em&gt;→经典已成一代人的回忆无法超越，不过模仿的还挺不错）。迫降之后男主在一个帅气的&lt;code&gt;生命三角&lt;/code&gt;拯救了好多人性命之后奇迹般的搞了一条快艇。在轮船翻的时候从螺旋桨下面擦头而过(螺旋桨真的没有气流吗，在那么大一艘船沉没的时候没有漩涡吗)，诸如此类，主角光环还是需要有的。可是无时无刻使用就没多大意思了。如果游戏当中能连续不停的暴击那么谁会和你玩耍呢~~~可能有时候就会想，这真的不是天佑男主么Orz&lt;/p&gt;
&lt;p&gt;其次，男主的身材真是好！在一个侧面的镜头的时候男主的手握住女主的双肩。在3D的效果下就赶脚男主体形完全是女主2倍有余嘛，简直宽厚伟岸！！保家卫国。看~~家是在前面的。连自己的亲人都保护不了当什么键盘党去操中南海的心嘞。细想一下这要是我党的电影可能就是这个样子鸟。当时发生地震了，男主同时接到了战友和女主的电话。男主果断说了阿门然后投入到了英勇的救灾工作中。片尾女主和女儿出现一家团聚~~。美剧虽然都是个人英雄主义，用在保家这方面还真是激动人心呢~~&lt;/p&gt;
&lt;p&gt;另外,查了下男主引以为傲的’生命三角’网上指出瞎扯。宣扬错误的灾难预防理念真是心塞。还有使用手摇电话那一节。手摇电话用的是固化网络，固化网络不依赖城市电网啥的。只是大地震的时候它真的不会断掉么。面对地震的时候觉得不是可靠的，顶多也就比手机靠谱一点而已。对于灾难，剧中大家表现的相对镇定。发生二次伤害的情况不多。不知道真正面对这种重大灾难，随时可能性命不保会是什么样子T_T，哦&lt;br&gt;还有一点，是不是对于教授这个角色，总是适合大腹便便有着络腮胡的人来演呢&amp;gt;_&amp;lt;看起来比较有学识咩&lt;/p&gt;
&lt;p&gt;最后总结一下。这是一部以小爱胜于大爱为主题，以地震为背景毫无血腥也不紧张的特效电影~&lt;/p&gt;
&lt;h3 id=&quot;《侏罗纪世界》-2015-6-13&quot;&gt;&lt;a href=&quot;#《侏罗纪世界》-2015-6-13&quot; class=&quot;headerlink&quot; title=&quot;《侏罗纪世界》-2015.6.13&quot;&gt;&lt;/a&gt;《侏罗纪世界》-2015.6.13&lt;/h3&gt;&lt;p&gt;以前看过这个系列的某些电影。已经没什么印象了，真是一点印象都没有~~可能因为不是在电影院看的？话说可能是斯蒂芬·斯皮尔伯格这快金字招牌？电影给人的感觉非常棒，想到恐龙会不会让人觉得这是一部恐怖片呢。我想真的很容易拍成恐怖片。可是这部电影给人的感觉丝毫不恐怖~~音乐拿捏的恰到好处，紧张刺激不恐怖~~。&lt;/p&gt;
&lt;p&gt;问我别的？别的？卧槽&lt;br&gt;我就感觉好看了。但是哪里好看我还真想不起来，想不起来，想不起来&amp;gt;_&amp;lt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;我的影评我做主-想怎么写就怎么写-就是这么任性&quot;&gt;&lt;a href=&quot;#我的影评我做主-想怎么写就怎么写-就是这么任性&quot; class=&quot;headerlink&quot; title=&quot;我的影评我做主,想怎么写就怎么写,就是这么任性~~~~&quot;&gt;&lt;/a&gt;我的影评我做主,想怎么写就怎么写,就是这么任性~~~~&lt;/h4&gt;&lt;h4 id=&quot;《12公民》-15-5-23&quot;&gt;&lt;a href=&quot;#《12公民》-15-5-23&quot; class=&quot;headerlink&quot; title=&quot;《12公民》-15.5.23&quot;&gt;&lt;/a&gt;《12公民》-15.5.23&lt;/h4&gt;&lt;p&gt;据说是根据&lt;strong&gt;《12罗汉》改编&lt;/strong&gt;，没看过12罗汉，看过之后感觉这部电影还挺好。小成本的人文片故事讲的好也挺值得回味的。&lt;/p&gt;
&lt;p&gt;电影讲述的是一个牛逼检察官通过他理性的分析一步步还原了“富二代手刃生父”案件的真相。&lt;/p&gt;
&lt;p&gt;以下12个男主角(突然想到为嘛没女的呢，终于想到这么多年我好像第一次看到没有男女猪脚fall&lt;br&gt;in love的片子)：&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://ficapy.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>将pycharm的运行配置脚本路径修改为当前选中文件</title>
    <link href="http://ficapy.com/2015/03/18/change-pycharm-run-configurations-script-path-to-current-file/"/>
    <id>http://ficapy.com/2015/03/18/change-pycharm-run-configurations-script-path-to-current-file/</id>
    <published>2015-03-17T16:47:00.000Z</published>
    <updated>2016-03-03T09:13:17.000Z</updated>
    
    <content type="html">&lt;p&gt;这标题看着都挺让人蛋疼的，可能很少人会遇到这个问题。但是我觉得pycharm用多了应该是会遇到的~~~~~&lt;/p&gt;
&lt;p&gt;使用pycharm的时候每次运行脚本都会有一个&lt;strong&gt;&lt;span
style=&quot;text-decoration: underline;&quot;&gt;&lt;em&gt;&lt;span
style=&quot;color: #ff0000; text-decoration: underline;&quot;&gt;基于默认设置的python运行环境设置&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;，如下图所示&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/865uap38l.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;哈哈哈哈哈哈~~~~~~~~对着这张图看了好久&lt;br&gt;突然意识到这篇博文都没啥写的必要了，是不幸还是幸运呢。反正以前也问过一些人问题不怎么好描述都一直没得到方案，促使今天自己写了个小脚本。想想觉得也挺有趣&lt;br&gt;还是记录下来吧 临时发现这个也算是福气哇~~&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;每次右键点击再执行文件的时候都会生成一个python运行配置，这一步骤只是运行配置中的script项有所改变。假如你有很多个文件。那么执行多个文件后就将有多个运行配置了，看着真是相当不爽，如果你知道pycharm的external&lt;br&gt;tool，里面有insert&lt;br&gt;macros，其中\$FilePath\$就代表当前选择的文件绝对路径。可惜该参数无法填入script项，否则就能减少非常多python运行配置，大部分项目仅一个就可以了。&lt;/p&gt;
&lt;p&gt;如果项目使用的是本地python解释器&amp;amp;没有复杂的配置，那么直接右键点击再执行会自动生成一个python运行配置可以正常执行，也就不会有俺最开始的苦恼了。我使用的是vagrant开发环境，代码是从本机映射到虚拟机上，所以直接执行会显示路径错误~~~我的处理流程是这样的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最开始选择照旧执行，报错后进入运行设置添加路径映射&lt;/li&gt;
&lt;li&gt;可是特喵每次都添加映射好烦啊，映射路径好长的好咩，反正其他的不变，仅仅是运行文件改变了，于是乎选择要运行的时候就将一个好的运行设置修改文件路径为当前就好了&lt;/li&gt;
&lt;li&gt;就是现在了，觉得2也好烦。。。。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上烦恼就是因为忘记了针对每一个项目都有默认的环境设置，其实将默认的环境设置设置好以后自动继承就ok了&amp;gt;_&amp;lt;当想到3的时候总体方针就是自动修改script参数为当前文件路径。最开始是想写脚本找出该项目下所有py文件中最后修改的那个，然后就想可能pycharm对于每个项目都有一个配置文件，修改配置文件中script的地址就好了~~~可是最后没找到。最后就想到了模拟点击到设置页面修改了。然后就试了以下几个sikulix、aauto(快手)、按键精灵、Automa。第一四个一看便可上手，就和上手python的库那么简单，就几个特好理解的函数，二看了一下虽有auto但不适合做模拟点击，而且想立马使用也是没多大可能的，按键精灵我咋看着想吐呢，宁可去背几个函数也不想插入插入插入。。。。&lt;/p&gt;
&lt;p&gt;最后还是亮上用sikulix和automa写的代码吧，炒鸡简单&lt;a href=&quot;https://github.com/aec4d/ScriptLet/tree/master/pycharm\_script\_path\_autochange&quot;&gt;https://github.com/aec4d/ScriptLet/tree/master/pycharm\_script\_path\_autochange&lt;/a&gt;&lt;br&gt;需要注意的是需按照官网提示配置好环境。2个都是使用绝对坐标定位然后点击，屏幕分辨率1366*768，pycharm版本4.0.5&lt;/p&gt;
&lt;p&gt;bingo~~~~~~~~~~~~`&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这标题看着都挺让人蛋疼的，可能很少人会遇到这个问题。但是我觉得pycharm用多了应该是会遇到的~~~~~&lt;/p&gt;
&lt;p&gt;使用pycharm的时候每次运行脚本都会有一个&lt;strong&gt;&lt;span
style=&quot;text-decoration: underline;&quot;&gt;&lt;em&gt;&lt;span
style=&quot;color: #ff0000; text-decoration: underline;&quot;&gt;基于默认设置的python运行环境设置&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/strong&gt;，如下图所示&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/865uap38l.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;哈哈哈哈哈哈~~~~~~~~对着这张图看了好久&lt;br&gt;突然意识到这篇博文都没啥写的必要了，是不幸还是幸运呢。反正以前也问过一些人问题不怎么好描述都一直没得到方案，促使今天自己写了个小脚本。想想觉得也挺有趣&lt;br&gt;还是记录下来吧 临时发现这个也算是福气哇~~&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://ficapy.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Linode紧急模式修改密码</title>
    <link href="http://ficapy.com/2015/03/09/linode-rescue-mode-reset-root-password/"/>
    <id>http://ficapy.com/2015/03/09/linode-rescue-mode-reset-root-password/</id>
    <published>2015-03-09T01:45:00.000Z</published>
    <updated>2016-06-29T03:48:26.000Z</updated>
    
    <content type="html">&lt;p&gt;VPS运行太久了，也没怎么上去看。前些天重装电脑没保存VPS的登陆信息。等需要上去看的时候才知道&lt;strong&gt;粗大事了！&lt;/strong&gt;登陆不上去了&lt;/p&gt;
&lt;p&gt;我前期因为安全需要设置了禁用密码登陆，改用密匙，修改了端口，无奈去问Linode客服，得到答复如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hello;&amp;#10;&amp;#10;You can reset your root password by following the following steps:&amp;#10;&amp;#10;1) Go to your Linode&amp;#39;s dashboard  &amp;#10;2) Shut down your Linode  &amp;#10;3) Go to the &amp;#34;Rescue&amp;#34; tab of the Linode&amp;#39;s dashboard  &amp;#10;4) Type the new password in the &amp;#34;Reset Root Password&amp;#34; field  &amp;#10;5) Reset  &amp;#10;6) Wait for the process to finish (you&amp;#39;ll see it in your host job&amp;#10;queue)  &amp;#10;7) Boot your Linode&amp;#10;&amp;#10;Best regards,&amp;#10;&amp;#10;Dave Russell Jr  &amp;#10;Linode Support Specialist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;继续问，我修改了登陆端口，而且希望修改密码机器不重启可以么，答曰没有办法。最后只能说这个&lt;strong&gt;&lt;em&gt;官方复制的回复坑爹至极&lt;/em&gt;&lt;/strong&gt;。&lt;br&gt;正确步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入Remote Access页面获取Lisa via ssh代码&lt;/li&gt;
&lt;li&gt;使用SSH客户端连接，我使用的是cmder。该步骤要求你输入密码，密码为注册Linode的密码，非vps登陆密码&lt;/li&gt;
&lt;li&gt;进入后会出现如下字符localhost&lt;br&gt;login:要求你输入账号密码，此时才是你的VPS登陆密码，非Linode账号密码（我就是在这里卡了好久。。。没反应过来）&lt;/li&gt;
&lt;li&gt;到这里就是上面官方客服的步骤了，1.先关闭VPS。2.进入rescue页面最下方重置root密码。3.开机&lt;/li&gt;
&lt;li&gt;用上面修改的root密码键入步骤三&lt;/li&gt;
&lt;li&gt;最后修改/etc/ssh/sshd_config配置service ssh restart&lt;/li&gt;
&lt;li&gt;bingo，重置密码完成~~~~~~~~~·&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;补图2张&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/UbP8Dv52.png&quot; alt=&quot;Linode\_reset\_password\_1&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/FGm3768z.png&quot; alt=&quot;Linode\_reset\_password\_2&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;VPS运行太久了，也没怎么上去看。前些天重装电脑没保存VPS的登陆信息。等需要上去看的时候才知道&lt;strong&gt;粗大事了！&lt;/strong&gt;登陆不上去了&lt;/p&gt;
&lt;p&gt;我前期因为安全需要设置了禁用密码登陆，改用密匙，修改了端口，无奈去问Linode客服，得到答复如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Hello;&amp;#10;&amp;#10;You can reset your root password by following the following steps:&amp;#10;&amp;#10;1) Go to your Linode&amp;#39;s dashboard  &amp;#10;2) Shut down your Linode  &amp;#10;3) Go to the &amp;#34;Rescue&amp;#34; tab of the Linode&amp;#39;s dashboard  &amp;#10;4) Type the new password in the &amp;#34;Reset Root Password&amp;#34; field  &amp;#10;5) Reset  &amp;#10;6) Wait for the process to finish (you&amp;#39;ll see it in your host job&amp;#10;queue)  &amp;#10;7) Boot your Linode&amp;#10;&amp;#10;Best regards,&amp;#10;&amp;#10;Dave Russell Jr  &amp;#10;Linode Support Specialist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://ficapy.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Linode" scheme="http://ficapy.com/tags/Linode/"/>
    
      <category term="Lish" scheme="http://ficapy.com/tags/Lish/"/>
    
  </entry>
  
  <entry>
    <title>Flask项目初始配置</title>
    <link href="http://ficapy.com/2014/10/29/flask_project_init/"/>
    <id>http://ficapy.com/2014/10/29/flask_project_init/</id>
    <published>2014-10-29T14:19:00.000Z</published>
    <updated>2016-06-29T03:48:19.000Z</updated>
    
    <content type="html">&lt;p&gt;记录一下flask项目的配置，做个笔记。适合我等小白习惯windows却喜欢dpkg友好的包管理安装软件的童鞋,其实开源项目总是优先满足Unix系统的，确实比在windows上用着舒服哇！&lt;br&gt;使用工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;windows7 X64&lt;/li&gt;
&lt;li&gt;vagrant&lt;/li&gt;
&lt;li&gt;ubuntu14&lt;/li&gt;
&lt;li&gt;xshell&lt;/li&gt;
&lt;li&gt;cmder(可选)&lt;/li&gt;
&lt;li&gt;pycharm&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;准备步骤：&lt;/p&gt;
&lt;h2 id=&quot;1-环境搭建&quot;&gt;&lt;a href=&quot;#1-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;1.环境搭建&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.环境搭建&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vagrant box add ubuntu14 URL(或者先下载box文件用文件名替代)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant init ubuntu14  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant up  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vagrant halt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;NOTE.&lt;/strong&gt;&lt;br&gt;vagrant使用可谓相当简单了,使用单文件配置,整个周期分为add/init/up/reload/suspend/halt/destroy;&lt;/p&gt;
&lt;p&gt;另外推荐将22端口进行转发。默认转发到2222，但是当打开多个虚拟机的时候因为2222端口被占用所有会随机指定一个端口。So，固定一下对自己的设置是相当有利的。当然因为Flask默认使用5000端口进行测试，对它进行转发也是理所当然的;&lt;/p&gt;
&lt;p&gt;至于使用vagrant&lt;br&gt;ssh登陆,用系统自带的CMD那是相当难受滴,使用cmder全功能版不错。用过一段时间不得不说相对CMD真实赏心悦目,在我的使用中感觉确定有两个。毕竟不是专业的SSH客户端，对于中文文件名无能为力，或许是我不会设置，其二是无法设置代理而且连接到远程VPS时候输入卡顿严重。所以最后还是回归了Xshell。&lt;/p&gt;
&lt;p&gt;开机关机每次进入cmder cd c:\path 进入vagrant 在运行vagrant&lt;br&gt;up是相当厌烦的，用python脚本启动它是个不错的选择&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;os.system(&lt;span class=&quot;string&quot;&gt;&#39;cd &quot;c:\\\\ficapy\\\\microblog&quot; &amp;amp;&amp;amp; vagrant reload&#39;&lt;/span&gt;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#是不是异常简单呢 切换到目录执行reload操作→不一定要先启动再重载！  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# &amp;amp;&amp;amp;表示上个操作执行完毕后在执行下面的操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-Linux配置&quot;&gt;&lt;a href=&quot;#2-Linux配置&quot; class=&quot;headerlink&quot; title=&quot;2.Linux配置&quot;&gt;&lt;/a&gt;&lt;strong&gt;2.Linux配置&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update upgrade \&lt;span class=&quot;comment&quot;&gt;#更新源&amp;amp;升级系统  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install git git-core python python-dev python-setuptools  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo easy\_install pip  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo pip install virtualenv virtualenvwrapper  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nano \~/.bashrc  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;添加下面两行配置后重新运行(&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; \~/.bashrc)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; WORKON\_HOME=\&lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;/.virtualenvs  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/virtualenvwrapper.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;br&gt;virtualenvwarpper顾名思义是对virtualenv的二次包装,给我的赶脚就是环境不是在放在开发文件夹下面了，而且命令行直观友好容易记忆，还有TAB自动补全哟。常用的大致有mkvirtualenv/rmvirtualenv/lsvirtualenv/workon/deactive;&lt;/p&gt;
&lt;p&gt;另外使用pip安装第三方包的时候不要使用sudo pip&lt;br&gt;install,该操作会导致安装到全局，而不是安装到当前环境中.直接使用pip&lt;br&gt;install安装.Linux比较小白，暂时我也不知道为什么&lt;/p&gt;
&lt;p&gt;ubuntu14自带python2.7可以不用安装python。可是python-dev这个必装，否则pip安装一些需要编译安装的第三方包的时候会报一些莫名其妙的错误，比如pycurl等。同时直接使用二进制包python-pip安装pip有时候安装包会出错（一朝被蛇咬，十年怕井绳啊，所以我还是使用官方推荐的easy_install方式安装了，还有一种是下载get.py方式）&lt;/p&gt;
&lt;h2 id=&quot;3-windows端Pycharm设置&quot;&gt;&lt;a href=&quot;#3-windows端Pycharm设置&quot; class=&quot;headerlink&quot; title=&quot;3.windows端Pycharm设置&quot;&gt;&lt;/a&gt;&lt;strong&gt;3.windows端Pycharm设置&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;使用vagrant后，默认设置文件将该目录映射到虚拟的的/vagrant文件夹。我们就将项目统一放在该文件夹下&lt;/p&gt;
&lt;p&gt;不得不说的是pycharm上的vagrant插件在windows上是无法使用的,至少对我来说是这样，手动配置远端python解释器，如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/pycharm_remote_interoreters_config.png&quot; alt=&quot;pycharm\_remote\_interoreters\_config&quot;&gt;Note.在这里点击fill&lt;br&gt;from vagrant config就有用了,改变2222端口是一个很好的选择&lt;/p&gt;
&lt;p&gt;设置远端python解释器后就可以在本地调用了，这还不够，同时还需要设置项目目录映射，以便解释器能够根据本地文件映射到虚拟机文件的地址让解释器执行。选择Run→Configureations,最主要的设置是一、选择解释器；二、设置work&lt;br&gt;directory和Path mapping之后就能正确的使用虚拟机的python运行本地文件了;&lt;/p&gt;
&lt;p&gt;另外，有时候不想用xshell连接后运行python。这时候使用pycharm也是相当方便的。Tools→run&lt;br&gt;python&lt;br&gt;console就够了,会默认添加当前目录到python的包索引列表方便导入,只是有时候这个目录并不完全正确,可能是设置还是有错误吧，我每次都重运行sys.path.extend([‘/vagrant/path~~~~~~‘])手动解决&lt;/p&gt;
&lt;p&gt;~~~~~~~~还想写个安装heroku客户端的,自己还没有很好的实践,以后试试吧，至少测试部署还是相当方便的&lt;/p&gt;
&lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;http://blog.segmentfault.com/fenbox/1190000000264347&quot;&gt;http://blog.segmentfault.com/fenbox/1190000000264347&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://pedrokroger.net/getting-started-pycharm-python-ide/&quot;&gt;http://pedrokroger.net/getting-started-pycharm-python-ide/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://bliker.github.io/cmder/&quot;&gt;http://bliker.github.io/cmder/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下flask项目的配置，做个笔记。适合我等小白习惯windows却喜欢dpkg友好的包管理安装软件的童鞋,其实开源项目总是优先满足Unix系统的，确实比在windows上用着舒服哇！&lt;br&gt;使用工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;windows7 X64&lt;/li&gt;
&lt;li&gt;vagrant&lt;/li&gt;
&lt;li&gt;ubuntu14&lt;/li&gt;
&lt;li&gt;xshell&lt;/li&gt;
&lt;li&gt;cmder(可选)&lt;/li&gt;
&lt;li&gt;pycharm&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Flask" scheme="http://ficapy.com/categories/Flask/"/>
    
    
      <category term="Flask配置" scheme="http://ficapy.com/tags/Flask%E9%85%8D%E7%BD%AE/"/>
    
      <category term="pycharm" scheme="http://ficapy.com/tags/pycharm/"/>
    
      <category term="vagrant" scheme="http://ficapy.com/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>V2EX签到脚本</title>
    <link href="http://ficapy.com/2014/08/02/v2ex_signin/"/>
    <id>http://ficapy.com/2014/08/02/v2ex_signin/</id>
    <published>2014-08-02T14:18:00.000Z</published>
    <updated>2016-06-29T03:48:48.000Z</updated>
    
    <content type="html">&lt;p&gt;本来打算上个月发的，一直没管博客，不管是啥来凑个文章数吧，刚学js仿照别人的脚本改写的签到脚本&lt;/p&gt;
&lt;p&gt;顺便说一下，写脚本真的很有趣，更有趣的是打开网页的时候Greasemonkey可以运行自己写的脚本，就酱紫&lt;/p&gt;
&lt;p&gt;凑字数完毕→_→&lt;/p&gt;
&lt;p&gt;哦，情人节！！！&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ==UserScript==&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @name        V2EX签到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @description V2EX任意页面自动签到&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @include     http*://*.v2ex.com/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @include     http*://v2ex.com/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @author      ficapy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @grant       GM_getValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @grant       GM_setValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @grant       GM_xmlhttpRequest&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @version     2014.7.18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @namespace   None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ==/UserScript==&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 注：参照 http://www.v2ex.com/t/80927 所修改&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//在V2EX搜索框显示需要提示的信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; showInformation = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;text&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;q&quot;&lt;/span&gt;).value = text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//检测是否登录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByClassName(&lt;span class=&quot;string&quot;&gt;&quot;bigger&quot;&lt;/span&gt;).length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; userId = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByClassName(&lt;span class=&quot;string&quot;&gt;&quot;bigger&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].textContent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; userId = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 间隔上次签到一天并且登陆再进行操作(或者切换了账号)→_→&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getUTCDate() != GM_getValue(&lt;span class=&quot;string&quot;&gt;&quot;sign&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;25:name&quot;&lt;/span&gt;).split(&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] || userId != GM_getValue(&lt;span class=&quot;string&quot;&gt;&quot;sign&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;25:name&quot;&lt;/span&gt;).split(&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]) &amp;amp;&amp;amp; userId )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    showInformation(&lt;span class=&quot;string&quot;&gt;&quot;正在检测每日签到状态...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    GM_xmlhttpRequest(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;method&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;/mission/daily&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;onload&quot;&lt;/span&gt; : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.responseText.match(&lt;span class=&quot;string&quot;&gt;&quot;领取 X 铜币&quot;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; days = response.responseText.match(&lt;span class=&quot;regexp&quot;&gt;/已连续登录.+天/&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                showInformation(&lt;span class=&quot;string&quot;&gt;&quot;正在领取今日签到奖励&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                GM_xmlhttpRequest(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;method&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt; : response.responseText.match(&lt;span class=&quot;regexp&quot;&gt;/(?=\/).+?(?=\&#39;)/g&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;onload&quot;&lt;/span&gt; : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;resp&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            showInformation(&lt;span class=&quot;string&quot;&gt;&quot;正在提交&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            days = &lt;span class=&quot;string&quot;&gt;&quot;已连续登陆&quot;&lt;/span&gt; + (&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(days.slice(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&quot;天&quot;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//返回连续登陆天数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            GM_xmlhttpRequest(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;string&quot;&gt;&quot;method&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;string&quot;&gt;&quot;url&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;/balance&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;string&quot;&gt;&quot;onload&quot;&lt;/span&gt; : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &lt;span class=&quot;comment&quot;&gt;//格式化日期，将缺0补齐.网站很坑爹的时间是GTM+8，后面的描述文件却没有加上，凌晨测试发现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;p&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;s&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;+s :s; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; today = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getUTCFullYear() + p(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getUTCMonth()+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) +p(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getUTCDate());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (res.responseText.match(today + &lt;span class=&quot;string&quot;&gt;&quot; 的每日登录奖励&quot;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        showInformation(days + &lt;span class=&quot;string&quot;&gt;&quot;，本次领取到&quot;&lt;/span&gt; + res.responseText.match(&lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;+today+&lt;span class=&quot;string&quot;&gt;&quot;.+铜币/&quot;&lt;/span&gt;))[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].split(&lt;span class=&quot;string&quot;&gt;&quot;奖励&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].replace(&lt;span class=&quot;regexp&quot;&gt;/ /g&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        GM_setValue(&lt;span class=&quot;string&quot;&gt;&quot;sign&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getUTCDate() + &lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt; + userId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        showInformation(&lt;span class=&quot;string&quot;&gt;&quot;自动领取遇到意外，你可以手动领取试试&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;string&quot;&gt;&quot;onerror&quot;&lt;/span&gt; : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; showInformation(&lt;span class=&quot;string&quot;&gt;&quot;网络异常&quot;&lt;/span&gt;);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.responseText.match(&lt;span class=&quot;string&quot;&gt;&quot;已领取&quot;&lt;/span&gt;).length)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    showInformation(&lt;span class=&quot;string&quot;&gt;&quot;今日已经领取过了&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    GM_setValue(&lt;span class=&quot;string&quot;&gt;&quot;sign&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getUTCDate() + &lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt; + userId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    showInformation(&lt;span class=&quot;string&quot;&gt;&quot;无法找到领奖按钮，请检查&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;onerror&quot;&lt;/span&gt; : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;showInformation(&lt;span class=&quot;string&quot;&gt;&quot;签到页面无法打开，请手动领取&quot;&lt;/span&gt;);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本来打算上个月发的，一直没管博客，不管是啥来凑个文章数吧，刚学js仿照别人的脚本改写的签到脚本&lt;/p&gt;
&lt;p&gt;顺便说一下，写脚本真的很有趣，更有趣的是打开网页的时候Greasemonkey可以运行自己写的脚本，就酱紫&lt;/p&gt;
&lt;p&gt;凑字数完毕→_→&lt;/p&gt;
&lt;p&gt;哦，情人节！！！&lt;/p&gt;
    
    </summary>
    
      <category term="伪技术" scheme="http://ficapy.com/categories/%E4%BC%AA%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="V2EX" scheme="http://ficapy.com/tags/V2EX/"/>
    
      <category term="javascript" scheme="http://ficapy.com/tags/javascript/"/>
    
      <category term="签到" scheme="http://ficapy.com/tags/%E7%AD%BE%E5%88%B0/"/>
    
  </entry>
  
  <entry>
    <title>利用selenium抓取OA数据生成综合图表</title>
    <link href="http://ficapy.com/2014/06/09/use_selenium_fetch_OA_generate_statistics_image/"/>
    <id>http://ficapy.com/2014/06/09/use_selenium_fetch_OA_generate_statistics_image/</id>
    <published>2014-06-09T14:21:00.000Z</published>
    <updated>2016-06-29T03:48:41.000Z</updated>
    
    <content type="html">&lt;p&gt;最近自己写了个小项目练手，原由是偶尔有需要登录公司OA看看发给领导批示的文件到哪一步了，文件不是特别多，但是流程比较多，需要的时间比较长。&lt;br&gt;总结一下该OA系统的特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出于安全措施考虑，采用了内网登录，首先需要连接深信服SSLVPN登录到系统内网才能操作。直接导致常规的使用requests等模拟登陆手段直接失效。&lt;/li&gt;
&lt;li&gt;需安装java等套件，设置信任等等一系列麻烦操作，对非IE浏览器几近无法成功浏览（俺试过多次），即使对于IE也不支持高版本，不过好像一直在升级，也不知是否有改进。&lt;/li&gt;
&lt;li&gt;系统性能不佳，反应巨慢，异常返回情况比较多。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;最后选择了使用python+selenium+IEdriver控制IE浏览器登陆系统抓取OA数据，不得不说这是一个痛苦的过程selenium对IE的支持异常差，支持最好的firefox以及速度最快的chrome都无法在该例中使用。这直接造成了几乎每一步模拟操作都要加一句time.sleep(3)进行等待操作，以免返回异常或者没有抓取到数据。最开始的时候我直接全模拟手工操作一步步进入需要抓取的页面（OA是frame里面套frame），结果浏览器经常运行不久就报告崩溃。山穷水尽疑无路，柳暗花明又一村，最终发现登陆后直接打开要抓取frame页面的地址就可以了，这一步让整个抓取数据的工作以及稳定性提高的不少&lt;br&gt;整个流程比较简单。模拟登陆→抓取数据→把数据存储到数据库（sqlite）→利用matplotlib把数据库的内容生成图表&lt;br&gt;在登录OA的时候会要求填入验证码，虽然目测该系统验证码比较弱智，但是俺目前的水平还是破不了。so。本着力求无人操作全自动的原则使用了在线打码服务。不得不吐槽一下，试了2家，联系了客服，第一家流程复杂的不得了，和技术人员折腾半天最后还是不了了之，俺的要求多简单啊，结果一定要搞啥开发者分成路线。另外一家流程倒是简单了很多，结果网站给的示例教程还是前一个网站没更新无法使用，找客服要了一个新的示例文件，根本无法运行。问客服，得到的答复是技术人员测试使用完全没问题,WQNMLGB。示例是用urllib写的上传文件操作。潇潇洒洒上百行。没办法自己用requests重新写了下20行搞定，嗯，感叹下http&lt;br&gt;for humans的称号果然不是白喊的&amp;gt;_&amp;lt;&lt;br&gt;最后抓取到数据就是可视化的过程啦，以前只听过matplotlib库生成牛X的图表。试过之后还不错，还好比较知名案例比较多，否则真不知道要折腾多久才能搞出来，借鉴了stackoverflow上面的一个回答看了下官网的一些文档东拼西凑生成了个看的过去的图表，如下图（嗯，打了点薄码）&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/2014-06-05.png&quot; alt=&quot;2014-06-05&quot;&gt;&lt;br&gt;以下是录制的视频，上传到youku就成渣画质了，想看的还是忍忍吧（注：由于录屏操作导致selenium无法正常截取验证码，最后用手工输入）密码:zoulei&lt;/p&gt;
&lt;embed width=&quot;480&quot; height=&quot;400&quot; type=&quot;application/x-shockwave-flash&quot; src=&quot;http://player.youku.com/player.php/sid/XNzIzNTMxOTA4/v.swf&quot; allowfullscreen=&quot;allowfullscreen&quot; quality=&quot;high&quot; align=&quot;middle&quot; allowscriptaccess=&quot;always&quot;&gt;&lt;/embed&gt;

&lt;p&gt;以下是github地址 &lt;a href=&quot;https://github.com/aec4d/OA_Fetch&quot;&gt;https://github.com/aec4d/OA_Fetch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;p.s由于暂时还不会打包，尝试使用pyinstall打包成exe文件失败。so如果想直接双击使用还是需要很费功夫的，需要安装&lt;br&gt;&lt;a href=&quot;http://www.lfd.uci.edu/~gohlke/pythonlibs/#matplotlib&quot;&gt;matplotlib&lt;/a&gt;，&lt;a href=&quot;http://docs.seleniumhq.org/&quot;&gt;selenium&lt;/a&gt;（IEdriver）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近自己写了个小项目练手，原由是偶尔有需要登录公司OA看看发给领导批示的文件到哪一步了，文件不是特别多，但是流程比较多，需要的时间比较长。&lt;br&gt;总结一下该OA系统的特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;出于安全措施考虑，采用了内网登录，首先需要连接深信服SSLVPN登录到系统内网才能操作。直接导致常规的使用requests等模拟登陆手段直接失效。&lt;/li&gt;
&lt;li&gt;需安装java等套件，设置信任等等一系列麻烦操作，对非IE浏览器几近无法成功浏览（俺试过多次），即使对于IE也不支持高版本，不过好像一直在升级，也不知是否有改进。&lt;/li&gt;
&lt;li&gt;系统性能不佳，反应巨慢，异常返回情况比较多。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="伪技术" scheme="http://ficapy.com/categories/%E4%BC%AA%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="matplotlib" scheme="http://ficapy.com/tags/matplotlib/"/>
    
      <category term="python" scheme="http://ficapy.com/tags/python/"/>
    
      <category term="selenium" scheme="http://ficapy.com/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>python安装exe包到虚拟环境</title>
    <link href="http://ficapy.com/2014/05/31/python_install_exe_package_to_virtualenv/"/>
    <id>http://ficapy.com/2014/05/31/python_install_exe_package_to_virtualenv/</id>
    <published>2014-05-31T15:40:00.000Z</published>
    <updated>2016-06-29T03:48:34.000Z</updated>
    
    <content type="html">&lt;p&gt;明天都儿童节了，要和五月份说再见了。这个月居然一篇博文都没有写，甚是惭愧&amp;gt;_&amp;lt;赶紧写一篇补上&lt;br&gt;python通常使用pip安装第三方库，如果你安装的库比较多总会遇到一些恼人的安装问题（如果安装了VC2008或许会好很多），所以像我等小白安装一些比较复杂的库的时候甚是喜欢用exe包进行安装~~~~~~谁让从小就习惯了windows的下一步这种操作呢&lt;br&gt;附上大名鼎鼎的python第三方哭二进制包下载地址：&lt;a href=&quot;www.lfd.uci.edu/~gohlke/pythonlibs/&quot;&gt;www.lfd.uci.edu/~gohlke/pythonlibs/&lt;/a&gt;&lt;br&gt;当项目越来越多的时候，我们一定会使用虚拟环境virtualenv来管理我们的包（可以见&lt;a href=&quot;http://www.reddit.com/r/Python/comments/26t245/how_do_you_python/http://&quot;&gt;reddit上的讨论&lt;/a&gt;），让各项目间的第三方库不至于混乱发生不兼容之类的悲剧&lt;/p&gt;
&lt;p&gt;但是当你想将打包好的二进制exe包安装到你的虚拟环境的时候可能你会遇到问题了，因为它不提供安装到哪个虚拟环境，只会安装到你的主环境中~~~~~~~好吧，这也算是一种悲剧，方便的exe打包文件居然无法配合virtualenv使用，难道只能在我大中华局域网使用蛋疼的pip。不知道是否火星了没，下面就是答案→_→&lt;br&gt;照搬别人的&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/virtualenv.jpg&quot; alt=&quot;&quot;&gt;使用winrar打开下载的exe文件会发现有2个文件夹PLATLIB和SCRIPTS&lt;/p&gt;
&lt;p&gt;将PLATLIB文件夹里面的内容全部复制到虚拟环境XXXX\Lib\site-packages中，将SCRIPTS文件夹的全部内容复制到XXXX&lt;span
id=&quot;crayon-5389f59639b1c172241163&quot;
class=&quot;crayon-syntax crayon-syntax-inline crayon-theme-tomorrow crayon-theme-tomorrow-inline crayon-font-droid-sans-mono&quot;
style=&quot;font-size: 15px !important; line-height: 17px !important;&quot;&gt;&lt;span
class=&quot;crayon-pre crayon-code&quot;
style=&quot;font-size: 15px !important; line-height: 17px !important;&quot;&gt;\Scripts&lt;/span&gt;&lt;/span&gt;文件夹下，最后试试导入库看是否成功~bingo&lt;br&gt;就是这么简单&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://www.laurivan.com/install-numpy-in-a-virtual-environment-on-windows/&quot;&gt;http://www.laurivan.com/install-numpy-in-a-virtual-environment-on-windows/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;明天都儿童节了，要和五月份说再见了。这个月居然一篇博文都没有写，甚是惭愧&amp;gt;_&amp;lt;赶紧写一篇补上&lt;br&gt;python通常使用pip安装第三方库，如果你安装的库比较多总会遇到一些恼人的安装问题（如果安装了VC2008或许会好很多），所以像我等小白安装一些比较复杂的库的时候甚是喜欢用exe包进行安装~~~~~~谁让从小就习惯了windows的下一步这种操作呢&lt;br&gt;附上大名鼎鼎的python第三方哭二进制包下载地址：&lt;a href=&quot;www.lfd.uci.edu/~gohlke/pythonlibs/&quot;&gt;www.lfd.uci.edu/~gohlke/pythonlibs/&lt;/a&gt;&lt;br&gt;当项目越来越多的时候，我们一定会使用虚拟环境virtualenv来管理我们的包（可以见&lt;a href=&quot;http://www.reddit.com/r/Python/comments/26t245/how_do_you_python/http://&quot;&gt;reddit上的讨论&lt;/a&gt;），让各项目间的第三方库不至于混乱发生不兼容之类的悲剧&lt;/p&gt;
&lt;p&gt;但是当你想将打包好的二进制exe包安装到你的虚拟环境的时候可能你会遇到问题了，因为它不提供安装到哪个虚拟环境，只会安装到你的主环境中~~~~~~~好吧，这也算是一种悲剧，方便的exe打包文件居然无法配合virtualenv使用，难道只能在我大中华局域网使用蛋疼的pip。不知道是否火星了没，下面就是答案→_→&lt;br&gt;照搬别人的&lt;/p&gt;
    
    </summary>
    
      <category term="伪技术" scheme="http://ficapy.com/categories/%E4%BC%AA%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="exe" scheme="http://ficapy.com/tags/exe/"/>
    
      <category term="python" scheme="http://ficapy.com/tags/python/"/>
    
      <category term="virtualenv" scheme="http://ficapy.com/tags/virtualenv/"/>
    
      <category term="虚拟环境" scheme="http://ficapy.com/tags/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>python简单实现网站打卡签到</title>
    <link href="http://ficapy.com/2014/04/21/python_implement_login_and_check_in/"/>
    <id>http://ficapy.com/2014/04/21/python_implement_login_and_check_in/</id>
    <published>2014-04-21T14:07:00.000Z</published>
    <updated>2016-06-29T03:49:49.000Z</updated>
    
    <content type="html">&lt;p&gt;断断续续学习python也有一段时间，偶尔也会有点小想法。和当年疯狂的挂QQ升级一样，也有很多人对论坛的每日打卡签到比较痴迷。我当年也会有去论坛打卡的习惯，时至今日虽然对打卡签到不再执着，但自学编程这条寂寞的路能用它来完成偶尔的一些小想法无疑是让我兴奋的。我有很多小想法，呵呵~~~每日自动打卡签到就是其中的一个，而且实现这个也是异常简单的事情。所以公开在俺博客的第一个python脚本就选它了。网站选择了一个网友的作为测试&lt;a href=&quot;http://bbs.hshy.net/&quot;&gt;http://bbs.hshy.net/&lt;/a&gt;&lt;br&gt;p.s. 该网站已关闭注册&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;至于实现原理，就是先使用fiddler抓取登陆和打卡的网址及参数，用python的requests模块实现构造请求网址以及对网址进行POST和GET操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ficapy.b0.upaiyun.com/blogimg/fiddler.png&quot; alt=&quot;fiddler&quot;&gt;&lt;/p&gt;
&lt;p&gt;中间需要注意的一些小细节：&lt;/p&gt;
&lt;p&gt;①fiddler搜索功能很强大，在所有会话中快速找到某个参数是如何来的很有用；&lt;/p&gt;
&lt;p&gt;②进行登陆POST操作的时候如果用户名是中文，需要先解码，这个例子里面是GBK（当初困扰了我一些时间），密码进行了MD5加密；&lt;/p&gt;
&lt;p&gt;③针对签到失败的处理，本例可选使用nexmo发送短信提醒  &lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/Ficapy/11130233.js&quot;&gt;&lt;/script&gt; 

&lt;p&gt;在ubuntu远程VPS下的使用：&lt;/p&gt;
&lt;p&gt;先安装python-pip&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get install python-pip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装python第三方模块requests&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install requests&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置定时任务(路径改成放置文件的路径)&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;crontab &lt;span class=&quot;operator&quot;&gt;-e&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; \* \* \* python /root/XXX/hshy_checkin.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ok，大功告成~~~~~~从此妈妈再也不担心我天天惦记着签到打卡了&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;断断续续学习python也有一段时间，偶尔也会有点小想法。和当年疯狂的挂QQ升级一样，也有很多人对论坛的每日打卡签到比较痴迷。我当年也会有去论坛打卡的习惯，时至今日虽然对打卡签到不再执着，但自学编程这条寂寞的路能用它来完成偶尔的一些小想法无疑是让我兴奋的。我有很多小想法，呵呵~~~每日自动打卡签到就是其中的一个，而且实现这个也是异常简单的事情。所以公开在俺博客的第一个python脚本就选它了。网站选择了一个网友的作为测试&lt;a href=&quot;http://bbs.hshy.net/&quot;&gt;http://bbs.hshy.net/&lt;/a&gt;&lt;br&gt;p.s. 该网站已关闭注册&lt;br&gt;
    
    </summary>
    
      <category term="伪技术" scheme="http://ficapy.com/categories/%E4%BC%AA%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python签到" scheme="http://ficapy.com/tags/python%E7%AD%BE%E5%88%B0/"/>
    
      <category term="打卡" scheme="http://ficapy.com/tags/%E6%89%93%E5%8D%A1/"/>
    
  </entry>
  
</feed>
